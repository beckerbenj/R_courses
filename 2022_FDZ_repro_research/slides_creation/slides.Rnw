\documentclass{beamer}

\usepackage{multicol}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{tikz}
\usetikzlibrary{arrows}
\usetikzlibrary{shapes.geometric}
\usepackage{hyperref}
\usepackage{url}

\usetheme{metropolis}

\newcommand{\MYhref}[3][blue]{\href{#2}{\color{#1}{#3}}}%



\title{Reproducible Research in R}
\institute{FDZ Autumn Academy}


\author[Dries Debeer \& Benjamin Becker]{Dries Debeer \& Benjamin Becker}
\date{29. and 30. September 2022}



<<r setup, echo=FALSE, message=FALSE, results="hide">>=
suppressPackageStartupMessages({
  library(knitr)
})

options(tinytex.verbose = TRUE)

knit_theme$set("acid")
opts_chunk$set(results="markup")
opts_chunk$set(echo = TRUE)
opts_chunk$set(eval = TRUE)
opts_chunk$set(strip.white = TRUE)
opts_chunk$set(size = "footnotesize")
opts_chunk$set(comment = ">")
opts_chunk$set(fig.width=3.5, fig.height=3)


# Farben
mLightBrown<-"#EB811B"
econBlue<-"#008BBC"
econRed<-"#C10534"
econBlueD<-"#3E647D"
econRedD<-"#90353B"
@


\begin{document}
%\SweaveOpts{concordance=TRUE}



\begin{frame}
\titlepage
\end{frame}
\addtocounter{framenumber}{-1}


\setcounter{tocdepth}{3}

% \begin{frame}{Table of Content}
% \fontsize{5pt}{4}
%
% \begin{multicols}{3}
%   \tableofcontents
% \end{multicols}
% \end{frame}


\section{Introduction}

\begin{frame}{Introduction}
\begin{columns}[t]
\begin{column}{.475\textwidth}
    \textbf{Who are we?}

    \vspace{0.3cm}

    \textcolor{mLightBrown}{Dries Debeer} \\

    \vspace{0.2cm}

    Statistical Consultant at Ghent University (FPPW)
\end{column}
\begin{column}{.475\textwidth}
    \textbf{}

    \vspace{0.3cm}

    \textcolor{mLightBrown}{Benjamin Becker} \\

    \vspace{0.2cm}

    Researcher at IQB (Verbund Forschungsdaten)

\end{column}
\end{columns}

\vspace{0.2cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}
\MYhref{https://github.com/ddebeer/scDIFtest}{scDIFtest}, \MYhref{https://github.com/ddebeer/permimp}{permimp}, \MYhref{https://github.com/beckerbenj/eatATA}{eatATA}, \MYhref{https://CRAN.R-project.org/package=mstDIF}{mstDIF}

\end{column}
\begin{column}{.475\textwidth}
\MYhref{https://github.com/beckerbenj/eatGADS}{eatGADS}, \MYhref{https://github.com/beckerbenj/eatDB}{eatDB}, \MYhref{https://github.com/beckerbenj/eatATA}{eatATA}, \MYhref{https://github.com/beckerbenj/pisaRT}{pisaRT}

  \end{column}
\end{columns}

\vspace{0.3cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}

\MYhref{mailto:dries.debeer@ugent.be}{dries.debeer@ugent.be}

\end{column}
  \begin{column}{.475\textwidth}

\MYhref{b.becker@iqb.hu-berlin.de}{b.becker@iqb.hu-berlin.de}

  \end{column}
\end{columns}

\vspace{1.5em}
\end{frame}

\begin{frame}{Introduction}
\textbf{Who are you?}
\begin{enumerate}%\itemsep0em
	\item Occupation, employer?
	\item Previous knowledge and experience
	\begin{itemize}
	  \item with reproducible research
	  \item with R?
	  \item with other statistical software?
	  \item with other programming languages?
	\end{itemize}
	\item Specific interest/motivation for this workshop?
\end{enumerate}
\end{frame}


\subsection{Motivation}

\begin{frame}{Motivation}
\textbf{Why care about reproducible research?}

\end{frame}



\subsection{Agenda}

\begin{frame}{Agenda}
\begin{itemize}
  \item Conceptual things
  \item Writing Reproducible R Code
  \item RMarkdown
  \item Version Control/git
\end{itemize}
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Reproducible Research}


\subsection{Reproducibilty}

\begin{frame}{Reproducibilty \& Replicability}
\begin{columns}
\begin{column}{.4\textwidth}
\textbf{Reproducibility}
  \begin{itemize}
    \item Same research question
    \item Same analysis
    \item \textbf{Same} data
    \item[=>] \emph{Same results}
  \end{itemize}
\end{column}
\begin{column}{.4\textwidth}
\textbf{Replicability}
  \begin{itemize}
    \item Same research question
    \item Same analysis
    \item \textbf{New} data
    \item[=>] \emph{Same results}
  \end{itemize}
\end{column}
\end{columns}
\end{frame}


\begin{frame}{Reproducibilty}
The \textbf{replicability} crisis in psychological* Research is partly caused by \textbf{reproducibility} issues.
\begin{itemize}
  \item more than 70 percent of the researchers that tried to reproduce other scientist's experiments failed (Baker, 2016).
  \item more than 50 percent of the researchers that have tried to reproduce their own experiments failed (Baker, 2016).
\end{itemize}

\vspace{2.5cm}

*Psychology, educational sciences and social work

Baker, M. (2016). Reproducibility crisis. Nature, 533(26), 353-66.
\end{frame}

% ----------------------------------------------------------------------------------------------------------------------
\section{RStudio setup}
\label{sec:rstudio}

\begin{frame}{RStudio setup}
\begin{enumerate}
  \item Save the course content to a directory on your machine
  \item Open RStudio
  \item Choose \texttt{File < New Project ... }
  \item Choose \texttt{Existing Directory}
  \item Browse to the directory on your machine where you saved the course content and select the ``{\color{blue}R-programming}'' folder as the \texttt{Project working directory}
  \item Click \texttt{Open in new session}
  \item Click \texttt{Create Project}
\end{enumerate}
\end{frame}

\begin{frame}{RStudio setup - optional}
\begin{enumerate}
  \item Choose \texttt{Tools < Global options}
  \item Under \texttt{General}
  \begin{itemize}
    \item DON'T \texttt{Restore .RData into workspace at startup}
    \item NEVER \texttt{Save workspace to .Rdata on exit:}
    \item Save the code instead!
    \item Use \texttt{saveRDS()} and \texttt{readRDS()} for objects that require a long time to computate
  \end{itemize}
  \item Further personalize RStudio
\end{enumerate}
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Writing Reproducible R Scripts}


\begin{frame}{Reproducible Workflow in R \& Rstudio}
\textbf{Key Principles:}
\vspace{-\topsep}
\begin{enumerate}
	  \item Save your code
	  \item Work in projects
	  \begin{itemize}
	    \item Use multiple scripts
	    \item Use multiple projects
	  \end{itemize}
	  \item Frequently and completely restart
	\end{enumerate}
\end{frame}


\subsection{1. Save your code}


\begin{frame}{1. Save your code}
\begin{itemize}
  \item Save the code for preprocessing/data manipulation (don't save intermediate data sets)
  \item Save the code for visualizations (don't save the plots)
  \item Save the code for analyses (don't save the results)
\end{itemize}
\begin{center}
\LARGE
\emph{\color{red}May the source code be with you!}
\end{center}
\visible<2>{\begin{itemize}
  \item Use \texttt{saveRDS()} and \texttt{readRDS()} for objects that require a long time to compute}
\end{itemize}
\end{frame}


\begin{frame}{1. Save your code}
\textbf{Within RStudio}
\vspace{-\topsep}
\begin{enumerate}
  \item Choose \texttt{Tools < Global options}
  \item Under \texttt{General}
  \begin{itemize}
    \item DON'T \texttt{Restore .RData into workspace at startup}
    \item NEVER \texttt{Save workspace to .Rdata on exit:}
    \item Save your script instead!
    \item Use \texttt{saveRDS()} and \texttt{readRDS()} for objects that require a long time to compute
  \end{itemize}
  \item You can further personalize RStudio
  \begin{itemize}
    \item Visually (\texttt{Tools < Global options < appearance})
    \item Keyboard shortcuts (\texttt{Tools < Modify Keyboard Shortcuts...})
    \item ...
  \end{itemize}
\end{enumerate}
\end{frame}


\begin{frame}{1. Save your code}
\textbf{A typical workflow:}
\vspace{-\topsep}
\begin{itemize}
  \item Write your code in scripts in text editor.
  \item Execute lines (or chunks) of code by sending them to the R console.
  \item Add comments using the hash tag \#
  \item Add sections to long scripts (or use multiple scripts)
  \begin{itemize}
	  \item No lines of code are lost when R is shut down or crashes
	  \item Assures reproducible code/coding
	  \item Makes it easy to share your code with colleagues or reviewers
	  \item ...
  \end{itemize}
\end{itemize}
\end{frame}





\subsection{2. Work in projects}

\begin{frame}{2. Work in projects}
\textbf{What is a project?}
\vspace{-\topsep}
\begin{itemize}
  \item One designated folder containing all files related to a single (research) project.
  \item When necessary, add sub folders for ...
  \begin{itemize}
      \item data
      \item R scripts
      \item figures and graphs
      \item manuscripts
      \item presentations
      \item ...
  \end{itemize}
  \item The folder contains all relevant files, nothing more.
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
The idea of a project is formalized in an RStudio project.
\vspace{-\topsep}
\begin{itemize}
  \item Technically it is a small text file with \texttt(.Rproj) extension,
  \item which is associated with RStudio.
  \item RStudio recognizes the ``parent folder'' of this file as the project folder
\end{itemize}
\end{frame}



\begin{frame}{2. Work in projects}
Within an RStudio project...
\vspace{-\topsep}
\begin{itemize}
  \item the project folder is automatically set as the \emph{working directory}. \\ try \texttt{getwd()} within a project
  \item \textbf{\color{red}Don't use}
\end{itemize}
<<setwd, eval = FALSE>>=
setwd("path\to\your\local\folder")
@
\end{frame}



\begin{frame}{2. Work in projects}
Use relative paths for reading and writing data. Avoid ...
<<avoid, eval = FALSE>>=
cannot open file 'path\that\only\works\on\my-computer': No such file or directory
@
  \begin{itemize}
  \item With relative paths, code works when ...
  \begin{itemize}
    \item the project folder is moved (or renamed)
    \item you are working on a shared drive
    \item you send your project in a ZIP-folder
  \end{itemize}
  \item useful functions:
  \begin{itemize}
      \item \texttt{?list.dirs}
      \item \texttt{?list.files}
  \end{itemize}
  \item (Or use the \MYhref{https://CRAN.R-project.org/package=here}{here}-package)
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
Keep it clean!
\vspace{-\topsep}
\begin{itemize}
  \item One folder per project
  \item No outside code
  \item No outside computing
  \item Use separate RStudio projects for each project
  \item Use separate Rstudio instances for each Rstudio project
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
How to create an Rstudio project?
\vspace{-\topsep}
\begin{enumerate}
  \item Open Rstudio
  \item Choose \texttt{File < New Project ... }
  \item Choose \texttt{Existing Directory}
  \item Browse to the directory on your machine where you saved the course content and select the ``{example-project-2}'' folder as the \texttt{Project working directory}
  \item Click \texttt{Open in new session}
  \item Click \texttt{Create Project}
\end{enumerate}
\end{frame}




\begin{frame}{2. Work in projects}
Within a project, use multiple source files (scripts) for:
\vspace{-\topsep}
\begin{enumerate}
  \item Preprocessing data
  \item Descriptive analysis
  \item Building models
  \item Hypothesis testing
  \item Making graphs
  \item ...
\end{enumerate}
\end{frame}


\subsection{3. Restart frequently}


\begin{frame}{3. Frequently and Completely Restart}

Regularly completely restart your session. \\

Don't use
<<rm, eval = FALSE>>=
rm(list = ls())
@


\begin{itemize}
  \item start clean, every time
  \item restart to make sure everything reproduces
  \item \texttt{.rs.restartR()}
  \item \texttt{Ctrl + Shift + F10}
\end{itemize}
\end{frame}







\section{How To?}

\begin{frame}{How to ... read data}
To analyse data, you have to \emph{read} the data from some file (or connection) and make it an \emph{object} in R.

Almost any type of file can be read by R, via specific functions and packages (\MYhref{https://CRAN.R-project.org/package=reader}{\texttt{reader}},
	\MYhref{https://CRAN.R-project.org/package=haven}{\texttt{haven}},
	\MYhref{https://CRAN.R-project.org/package=readxl}{\texttt{readxl}}, ...).
\vspace{-\topsep}
\begin{itemize}%\itemsep0em
	\item .txt $\rightarrow$ \texttt{read.table()}
	\item .csv $\rightarrow$ \texttt{read.csv(), read.csv2()}
	\item .xls $\rightarrow$ \texttt{readxl::read\_xls()}
	\item .xlsx $\rightarrow$ \texttt{readxl::read\_xlsx()}
	\item .sav $\rightarrow$ \texttt{haven::read\_sav()}
	\item .por $\rightarrow$ \texttt{haven::read\_por()}
	\item .sas $\rightarrow$ \texttt{haven::read\_sas()}
	\item ...
\end{itemize}
\end{frame}




\begin{frame}{How to ... preproces data}
Useful functions in \textbf{Base R}
\vspace{-\topsep}
\begin{itemize}
  \item \texttt{?'['} and \texttt{?'[['}
  \item \texttt{?merge}, \texttt{?reshape}
  \item \texttt{?apply}, \texttt{?tapply}, \texttt{?aggregate},...
  \item \texttt{?sort}, \texttt{?order}
  \item ...
\end{itemize}

Useful functions in \MYhref{https://CRAN.R-project.org/package=dplyr}{\texttt{dplyr}}
\vspace{-\topsep}
\begin{itemize}
  \item \texttt{?filter}, \texttt{?select}, \texttt{?slice}
  \item \texttt{?mutate}, \texttt{?rename}
  \item \texttt{?group\_by}, \texttt{?summarize}, \texttt{?ungroup}
  \item \texttt{?arrange}
  \item \texttt{?inner\_join}, \texttt{?left\_join}, ...
\end{itemize}
\end{frame}

\begin{frame}{How to ... preproces data}
For fast and efficient data wrangling with VERY big data, the  \MYhref{https://CRAN.R-project.org/package=data.table}{\texttt{data.table}}-package can be helpful.
\end{frame}



\begin{frame}{How to ... preproces data}
\begin{center}
\LARGE
\emph{\color{red}Never change raw data!}
\end{center}
If you made some mistakes while  preprocessing raw data $\rightarrow$ change your code and re-run it.\\
\vspace{.5cm}
\textbf{Note that:}
\vspace{-\topsep}
\begin{itemize}
  \item R ``reads'' the data and loads it in the work space.
  \item Hence, manipulating data within R(Studio) does not change the data on your machine. Only the loaded data within the work space is changed.
\end{itemize}
\end{frame}


\begin{frame}{How to ... write data}
When the data (a data.frame, a fitted model, ..) you want to save is for use in R only, use \texttt{saveRDS()} \texttt{readRDS()}.

When the data (a data.frame) is for use by software, several options are available:
\vspace{-\topsep}
\begin{itemize}%\itemsep0em
	\item .txt $\rightarrow$ \texttt{write.table()}
	\item .csv $\rightarrow$ \texttt{write.csv(), write.csv2()}
	\item .sav $\rightarrow$ \texttt{haven::write\_sav()}
	\item .por $\rightarrow$ \texttt{haven::write\_por()}
	\item .sas $\rightarrow$ \texttt{haven::write\_sas()}
	\item ...
\end{itemize}
\textbf{\color{red}WARNING:}\\
R does not prompt a warning when you are about to overwrite an existing file.
\end{frame}



\begin{frame}{How to ... save plots}
Only use the RStudio ``Plot''-window for interactive plot making. \\ Don't use it for saving plots.

For reproducible figures, use \texttt{pdf()}, \texttt{png()}, \texttt{jpeg()}, \texttt{tiff()}, ... instead. See \texttt{?jpeg}. \\

Adjust size and aspect ratio using the arguments:
\vspace{-\topsep}
\begin{itemize}
  \item \texttt{width = ...}
  \item \texttt{height = ...}
  \item \texttt{units = ...} $\rightarrow$ the units for the \texttt{width} and \texttt{height} arguments
  \item ...
\end{itemize}
\end{frame}


\begin{frame}[fragile]{How to ... save plots}
<<save-plot, eval = FALSE>>=
z_values <- rnorm(1e+4)
sig_z_values <- z_values[pnorm(abs(z_values),
                               lower.tail = FALSE) < 0.025]
pdf("name_for_this_figure.pdf", width = 10, height = 7)
{
  # all the code that creates the figure
  hist_data <- hist(z_values,
                    main = "Significant Z-values \n(stupid plot)",
                    xlab = "Z-values")
  hist(sig_z_values,
       breaks = hist_data$breaks,
       add = TRUE,
       col = "skyblue")
}
dev.off()
@
\end{frame}



% ----------------------------------------------------------------------------------------------------------------------
\section{RMarkdown}



% ----------------------------------------------------------------------------------------------------------------------
\section{Version Control via Git and Github}


\begin{frame}{Version Controlling}
\begin{itemize}
  \item Motivation
  \item Setup
  \item Work Flows
  \item Recommendations
  \item Resources
\end{itemize}
\end{frame}

% ----
\subsection{Motivation}

\begin{frame}{Motivation}
\begin{center}
\includegraphics[height=.75\textheight]{why_version_control.jpg}
\end{center}
\end{frame}

\begin{frame}{Motivation 1}
\textbf{Single Author Projects}
\begin{itemize}
  \item Implementation of long term change history
  \begin{itemize}
    \item What has been changed?
    \item When was it changed?
  \end{itemize}
  \item No ridiculous file names
  \item No archive sub folder
  \item Accessibility for others ('Open Science')
  \item Additional safety net
  \item ...
\end{itemize}
\end{frame}

\begin{frame}{Motivation 2}
\textbf{Collaborations}
\begin{itemize}
  \item Who has changed what when exactly?
  \item Clear, current project state
  \item No annoying mail attachments or file-sharing platforms
  \item Parallel work easily possible
  \item Possibility of hierarchical responsibilities
  \item ...
\end{itemize}
\end{frame}

\begin{frame}{Aber...}
\begin{center}
\includegraphics[height=.75\textheight]{git_no_idea.png}
\end{center}
\end{frame}

% ---
\subsection{Setup}

\begin{frame}{Prerequisits}
\begin{itemize}
  \item Git-Installation
  \item RStudio-Installation \\
  $\rightarrow$ Alternatives: Shell, Gitkraken, SmartGit, ...
  \item Github account\\
  $\rightarrow$ Alternatives: Bitbucket, Gitlab, ...
  \item Connect everything
\end{itemize}
\end{frame}

\begin{frame}{RStudio}
\begin{center}
\includegraphics[height=.75\textheight]{rstudio_git.JPG}
\end{center}
\end{frame}

\begin{frame}{RStudio}
\begin{center}
\includegraphics[width=.8\textwidth]{rstudio_git2.JPG}
\end{center}
\end{frame}

% ----
\subsection{Work Flows}

\begin{frame}{Work flow 1}
\textbf{Creating a repository}
\begin{itemize}
  \item Create an \textbf{online repository} (e.g. on Github)
  \begin{itemize}
    \item Use an R specific \texttt{.gitignore}
    \item Initialize with a short readme (\texttt{.md})
  \end{itemize}
  \item Clone the repository to your local machine via RStudio as a new project
  \item An R-Project is added automatically to the existing repository
\end{itemize}
\end{frame}

\begin{frame}{Excursion: gitignore}
\begin{itemize}
  \item Plain text file
  \item Which files should not be tracked by git? \\
  $\rightarrow$ These then only exist locally in their current version!
  \item Options
  \begin{itemize}
    \item Single files
    \item Folders
    \item Specific data types
    \item Combinations of the above
  \end{itemize}
  \item Use cases
    \begin{itemize}
    \item Large files (Data, images, ...)
    \item Auxiliary files (e.g. created during latex compilation)
  \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}{Work flow 2}
\textbf{Working with an existing repository}
\begin{itemize}
  \item Before working: Synch your local repo (\textbf{Pull} or \textbf{clone})
  \item Perform changes in your local repository \\
  $\rightarrow$ Create/modify/delete files
  \item \textbf{Stage} your changes
  \item \textbf{Commit} your changes (aka new version)
  \item \textbf{Push} your commit(s) (online repository is updated)
\end{itemize}
\end{frame}

\begin{frame}{Excursion: mergen}
\textbf{Conflicts between different updated versions}
\begin{itemize}
  \item Common when working collaboratively
  \item Discrepancies between your own different local repos
  $\rightarrow$ Git communicates these and indicates conflicts
  \item Select the desired changes
  \item Stage selection, commit and push
\end{itemize}
\end{frame}


\begin{frame}{Excursion: Branches}
\textbf{Multiple parallel versions of a project within one repository}
\begin{itemize}
  \item Common e.g. in areas like software development
  \item e.g. one stable and one development branch
  \item Only certain modifications should be made in the stable branch
  \item \textbf{Note}: RStudio GUI has limited support for this
\end{itemize}
\end{frame}

% ---
\subsection{Recommendations}

\begin{frame}[plain]
\begin{center}
\huge Your impressions?
\end{center}
\end{frame}


\begin{frame}{Recommendations}
\begin{itemize}
  \item Keep it simple!
  \begin{itemize}
    \item If not necessary, no branches/forks/pull requests
  \end{itemize}
  \item Have meaningful commits
  \item Keep it lean (no big files)
  \item Avoid using the Github homepage working within the repository
\end{itemize}
\end{frame}

% -----
\subsection{Resources}

\begin{frame}{Resources}
\textbf{Git + RStudio Resources}
\begin{itemize}
\item Small Intro (\url{https://r-bio.github.io/intro-git-rstudio/})
\item Happy Git with R (\url{https://happygitwithr.com/})
\item R Packages and Git (\url{https://r-pkgs.org/git.html})
\end{itemize}

\textbf{General Git Resources}
\begin{itemize}
\item Git Book (\url{http://git-scm.com/book/en/v2})
\end{itemize}

\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Good programming practices}
\label{sec:good}

\subsection{Code Style}

\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``Write code for humans, not for machines!''}
  \vskip5mm
  \hspace*\fill{\small}
\end{exampleblock}
\end{frame}

\begin{frame}{Code Style}
Invest time in writing readable R-code.
\begin{itemize}
  \item It will make collaborations easier
  \item It will make debugging easier
  \item It will make your analyses more reproducible
\end{itemize}
There is a complete \emph{tidyverse} style-guide \url{https://style.tidyverse.org/}.
\end{frame}

\subsection{Go easy on your eyes}

\begin{frame}{Go easy on your eyes}
\begin{itemize}
  \item with spaces before and after: \texttt{-  +  /  *  =  <-  <  ==  > }
  \item always use \texttt{<-} for assignments
  \item only use \texttt{=} in function calls
  \item use indentation (largely automatic in RStudio)
  \item \texttt{CamelCaseNames} vs \texttt{snake\_case\_names}
  \item be consistent!
  \item wrap long lines at column 70-80 (Rstudio)
\end{itemize}
\end{frame}

\begin{frame}[fragile]{White space}
<<White space, eval = FALSE>>=
new_var=(var1*var2/2)-5/(var3+var4)

# versus

new_var <- (var1 * var2 / 2) - 5 / (var3 + var4)
@
\end{frame}

\begin{frame}[fragile]{Indentation}
<<Indentation, eval = FALSE, size="footnotesize">>=
for(name in names){formula=as.formula(paste0("y~.-",name))
fit<-lm(formula,data=my_data)
coefs[["name"]]=coef(fit)
print(name)
print(summary(fit))}

# versus

for(name in names){
  formula <- as.formula(paste0("y~.-", name))
  fit <- lm(formula, data = my_data)
  coefs[["name"]] <- coef(fit)
  print(name)
  print(summary(fit))
}
@
\end{frame}

\begin{frame}[fragile]{Wrap long lines}
<<Wrap long lines, eval = FALSE , size="footnotesize">>=
final_results <- data.frame(first_variable =
sqrt(results$mean_squared_error), second_variable =
paste0(results$condition, results$class, sep = ":"),
third_variable = results$bias)

# versus

final_results <- data.frame(
  first_variable = sqrt(results$mean_squared_error),
  second_variable = paste0(results$condition,
                           results$class, sep = ":"),
  third_variable = results$bias)
@
\end{frame}

\subsection{Go easy on your mind}

\begin{frame}{Go easy on your mind}
\begin{itemize}
  \item use meaningful names: ``self-explainable''
  \item always write the formal arguments in function calls (except the first)
  \item benefit from autocompletion (\texttt{<tab>}) => embrace longer names
  \item use \texttt{TRUE} and \texttt{FALSE} not \texttt{T} and \texttt{F}
  \item comment, comment, comment
  \begin{itemize}
    \item NOT what (should be clear from the code)
    \item but why
    \item explain the reasoning, not the code
  \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Use meaningful names}
<<Use meaningful names, eval = FALSE >>=
V <- myFun(m1_B)

# versus

RMSE_age_gender <- get_RMSE(lm_age_gender)
@
\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
Use \texttt{verbs} for functions and \texttt{nouns} for other objects.
\end{block}
\end{frame}

\begin{frame}[fragile]{Write formal arguments}
Benefit from auto completion using \texttt{tab}
<<Write formal arguments, eval = FALSE , size="footnotesize">>=
m1_B <- lm(outcome ~ age*gender,
           exp1, condition_1, freq)

# versus

lm_age_gender <- lm(outcome ~ age * gender,
                    data = exp1,
                    subset = condition_1,
                    weigths = freq)
@
\end{frame}

\begin{frame}[fragile]{Comment, comment, comment}
<<Comment, eval = FALSE , size="footnotesize">>=
## Start every Rscript with a comment that explains
##  what the code in the script does, why it does
##  this, and to which project it belongs.
##  Your future self will be very thankful!
##
## Mention which packages you are using in this Rscript.

## Use sections to separate chunks ----------------------

## Maybe even subsections ===============================

## Recode variables so that missings are coded as "NA"
dat[dat %in% c(99, 999)] <- NA  # missings coded 99 or 999
@
\end{frame}


\subsection{R Peculiarities}


\begin{frame}[fragile]{Keep your code slim}
Try to limit your \emph{package-dependencies}.

\vspace{0.3cm}

Only load \texttt{library()} the packages that you absolutely need. If you are only using \texttt{dplyr}, it does not make sense to load the complete \texttt{tidyverse}.

\vspace{0.3cm}

\textbf{Controversial:} when possible, use the \texttt{::} operator (and consider not loading the package). \texttt{<package>::<function>}
\begin{itemize}
  \item explicit dependencies
  \item less name conflicts
\end{itemize}
\end{frame}


\begin{frame}[fragile]{Never Attach}
Forget about \texttt{attach()}!

\vspace{0.3cm}

Don't use it, unless you completely understand what happens (see \texttt{?attach}).

\vspace{0.3cm}

Use \texttt{with(data.frame, expression)} instead.
<<attach, eval = FALSE >>=
# using with()
n <- 2e+4
data <- data.frame(x = runif(n),
                   y = runif(n),
                   z = seq_len(n))
result <- with(data, exp(x) / log(z) + 5 * sqrt(y))
@
\end{frame}


\begin{frame}{Testing R code}
Writing code is error prone. Incorporate tests and checks in your workflow.
\begin{itemize}
  \item minimal examples
  \item write tests and checks
  \item helpful packages: \texttt{testthat}, \texttt{RUnit}, \texttt{testit}, ...
\end{itemize}
\end{frame}


\begin{frame}[fragile]{Speed}
Computing speed can become an issue. Avoid common pitfalls:
\begin{itemize}
  \item don't grow, but replace
  \item vectorize where possible
  \item check the computing speed
\end{itemize}
\texttt{?system.time},  \text{microbenchmark} or profiling tools
<< >>=
n <- 2e+4
data <- data.frame(x = runif(n),
                   y = runif(n),
                   z = seq_len(n))
@
\end{frame}


\begin{frame}[fragile]{Speed}
Don't grow!
<< >>=
system.time({
  new_data <- NULL

  for(row_nr in seq_len(NROW(data))){
    new_data <- cbind(
      data[row_nr,],
      result = exp(data$x[row_nr]) /
        log(data$z[row_nr]) +
        5 * sqrt(data$y[row_nr]))
  }
})
@
\end{frame}


\begin{frame}[fragile]{Speed}
Replace!
<< >>=
system.time({
  n_rows <- dim(data)[1]
  data$result <- rep(NA, n_rows)

  for(row_nr in seq_len(n_rows)){
    data$result[row_nr] <- exp(data$x[row_nr]) /
      log(data$z[row_nr]) +
      5 * sqrt(data$y[row_nr])
  }
})
@
\end{frame}


\begin{frame}[fragile]{Speed}
Vectorize!
<< >>=
system.time({
  data$result <- exp(data$x) / log(data$z) +
    5 * sqrt(data$y)
})
@
\end{frame}



\begin{frame}[fragile]{Speed}
Compare the speed of different implementations using:

\vspace{0.3cm}

\texttt{microbenchmark::microbenchmark}
<< >>=
get_mean1 <- function(x){
  weight <- 1/length(x)
  out <- 0
  for(i in seq_along(x)){
    out <- out + x[i] * weight
  }
  return(out)
}

get_mean2 <- function(x){
  sum(x)/length(x)
}
@
\end{frame}


\begin{frame}[fragile]{Speed}
Compare the speed of different implementations using:

\vspace{0.3cm}

\texttt{microbenchmark::microbenchmark}
<< >>=
x <- rnorm(500)
microbenchmark::microbenchmark(
  mean(x), get_mean1(x), get_mean2(x))
@
\end{frame}


\begin{frame}[fragile]{Speed}

\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
Don't worry about speed before it becomes an issue.
\end{block}
\end{frame}





% ----------------------------------------------------------------------------------------------------------------------
\section{Wrap Up}

\begin{frame}{General Advice}
\begin{itemize}
\item Investing time in learning R pays off
\item It's a steady learning curve
\item Learn from masters
\item Rewrite important code - the first attempt is usually not the best approach
\end{itemize}
\end{frame}

\begin{frame}{General R Advice}
\begin{itemize}
\item Document well
\item Use a consistent style
\item Write functions
\item Split long functions in smaller ones
\item Write wrappers
\item Use Iteration (don't copy paste)
\item Use matrix operations and vectorized functions instead of loops
\item Use git
\end{itemize}
\end{frame}

\begin{frame}{Literature Recommendations}
R Resources
\begin{itemize}
\item Avanced R Ed. 1 (\url{http://adv-r.had.co.nz/})
\item Avanced R Ed. 2 (\url{https://adv-r.hadley.nz/})
\item R Inferno (\url{https://www.burns-stat.com/pages/Tutor/R_inferno.pdf})
\item R Packages (\url{https://r-pkgs.org/})
\item Clean Code (\url{https://mooc.aptikom.or.id/pluginfile.php/1174/mod_resource/content/1/Clean\%20Code_\%20A\%20Handbook\%20of\%20Agile\%20Software\%20C\%20-\%20Robert\%20C.\%20Martin.pdf})
\end{itemize}

\end{frame}


\begin{frame}[plain]

\begin{center}
\Large Thank you for your attention!

\visible<2>{Questions? Remarks?}
\end{center}

\end{frame}

\end{document}
