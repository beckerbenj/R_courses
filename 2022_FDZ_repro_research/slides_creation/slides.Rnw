\documentclass[aspectratio=169]{beamer}


\usepackage{textcomp}
\usepackage{hyperref}


\usepackage{multicol}
\usepackage[normalem]{ulem}  % strike out
\usepackage{multirow}
\usepackage{xcolor}
\usepackage{hyperref} % links
\usepackage{amsmath}  % sub- and superscript
\usepackage{soul}     % highlighting
\usepackage{listings} % code block
\usepackage{fancyvrb} % inline code
%\usepackage{url}
\setlength{\parskip}{\baselineskip}
\sethlcolor{yellow}
\usepackage[T1]{fontenc}
%\setlist[itemize]{noitemsep, topsep=0pt}

% drawing
\usepackage{tikz}
\usetikzlibrary{shapes,arrows,chains}
\usetikzlibrary[calc]

% code block
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,
    breaklines=true,
    captionpos=b,
    keepspaces=true,
    numbers=left,
    numbersep=5pt,
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    tabsize=2
}

\lstset{style=mystyle}

\newcommand{\MYhref}[3][blue]{\href{#2}{\color{#1}{#3}}}%
\newcommand{\textunderscript}[1]{$_{\text{#1}}$}
\newcommand{\textupperscript}[1]{$^{\text{#1}}$}

\setbeamertemplate{caption}{\insertcaption}  % for table caption

% Have this if you'd like section slides
\AtBeginSection[]{
    \sectionframe
}



\usetheme{metropolis}


\title{Reproducible Research in R}
\institute{FDZ Autumn Academy}


\author[Dries Debeer \& Benjamin Becker]{Dries Debeer \& Benjamin Becker}
\date{29. and 30. September 2022}



<<r setup, echo=FALSE, message=FALSE, results="hide">>=
suppressPackageStartupMessages({
  library(knitr)
})

options(tinytex.verbose = TRUE)

knit_theme$set("acid")
opts_chunk$set(results="markup")
opts_chunk$set(echo = TRUE)
opts_chunk$set(eval = TRUE)
opts_chunk$set(strip.white = TRUE)
opts_chunk$set(size = "footnotesize")
opts_chunk$set(comment = ">")
opts_chunk$set(fig.width=3.5, fig.height=3)


# Farben
mLightBrown<-"#EB811B"
econBlue<-"#008BBC"
econRed<-"#C10534"
econBlueD<-"#3E647D"
econRedD<-"#90353B"
@


\begin{document}
\tikzstyle{block} = [rectangle, draw, text width=6em, text centered, rounded corners, minimum height=4em]
\tikzstyle{edge} = [draw, -latex']
%\SweaveOpts{concordance=TRUE}



\begin{frame}
\titlepage
\end{frame}
\addtocounter{framenumber}{-1}


\setcounter{tocdepth}{3}

% \begin{frame}{Table of Content}
% \fontsize{5pt}{4}
%
% \begin{multicols}{3}
%   \tableofcontents
% \end{multicols}
% \end{frame}


\section{Introduction}

\begin{frame}{Introduction}
\begin{columns}[t]
\begin{column}{.475\textwidth}
    \textbf{Who are we?}

    \vspace{0.3cm}

    \textcolor{mLightBrown}{Dries Debeer} \\

    \vspace{0.2cm}

    Statistical Consultant at Ghent University (FPPW)
\end{column}
\begin{column}{.475\textwidth}
    \textbf{}

    \vspace{0.3cm}

    \textcolor{mLightBrown}{Benjamin Becker} \\

    \vspace{0.2cm}

    Researcher at IQB (Verbund Forschungsdaten)

\end{column}
\end{columns}

\vspace{0.2cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}
\MYhref{https://github.com/ddebeer/scDIFtest}{scDIFtest}, \MYhref{https://github.com/ddebeer/permimp}{permimp}, \MYhref{https://github.com/beckerbenj/eatATA}{eatATA}, \MYhref{https://CRAN.R-project.org/package=mstDIF}{mstDIF}

\end{column}
\begin{column}{.475\textwidth}
\MYhref{https://github.com/beckerbenj/eatGADS}{eatGADS}, \MYhref{https://github.com/beckerbenj/eatDB}{eatDB}, \MYhref{https://github.com/beckerbenj/eatATA}{eatATA}, \MYhref{https://github.com/beckerbenj/pisaRT}{pisaRT}

  \end{column}
\end{columns}

\vspace{0.3cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}

\MYhref{mailto:dries.debeer@ugent.be}{dries.debeer@ugent.be}

\end{column}
  \begin{column}{.475\textwidth}

\MYhref{b.becker@iqb.hu-berlin.de}{b.becker@iqb.hu-berlin.de}

  \end{column}
\end{columns}

\vspace{1.5em}
\end{frame}

\begin{frame}{Introduction}
\textbf{Who are you?}
\begin{enumerate}%\itemsep0em
	\item Occupation, employer?
	\item Previous knowledge and experience
	\begin{itemize}
	  \item with reproducible research?
	  \item with R?
	\end{itemize}
	\item Specific interest/motivation for this workshop?
\end{enumerate}
\end{frame}


\subsection{Agenda}

\begin{frame}{Agenda}
\textbf{Day 1}
\begin{itemize}
  \item Conceptual Introduction
  \item Writing Reproducible R Code
  \item Reproducible Reporting
\end{itemize}
\textbf{Day 2}
\begin{itemize}
  \item RMarkdown
  \item Version Control/git
\end{itemize}

\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Reproducible Research}


\subsection{Reproducibilty}

\begin{frame}{Reproducibilty \& Replicability}
\begin{columns}
\begin{column}{.4\textwidth}
\textbf{Reproducibility}
  \begin{itemize}
    \item Same research question
    \item Same analysis
    \item \textbf{Same} data
    \item[=>] \emph{Same results}
  \end{itemize}
\end{column}
\begin{column}{.4\textwidth}
\textbf{Replicability}
  \begin{itemize}
    \item Same research question
    \item Same analysis
    \item \textbf{New} data
    \item[=>] \emph{Same results}
  \end{itemize}
\end{column}
\end{columns}
\end{frame}


\begin{frame}{Reproducibilty}
The \textbf{replicability} crisis in psychological* research is partly caused by \textbf{reproducibility} issues.
\begin{itemize}
  \item more than 70 percent of the researchers that tried to reproduce other scientist's experiments failed (Baker, 2016).
  \item more than 50 percent of the researchers that have tried to reproduce their own experiments failed (Baker, 2016).
\end{itemize}

\vspace{2.5cm}

*Psychology, educational sciences and social work

Baker, M. (2016). Reproducibility crisis. \emph{Nature, 533(26)}, 353-66.
\end{frame}

\begin{frame}{Reproducibility}
\textbf{Threats to self-replication} (see also Peikert et al., 2021)
\begin{itemize}
  \item (Silent) Mistakes in data preparation/analysis (e.g., syntax bugs)
  \item Inconsistent versions of code, data, or both
  \item Copy-and-paste errors
  \item ...
\end{itemize}

Peikert, A.,van Lissa, J., Brandmaier, A.M. (2021). Reproducible Research in R: A Tutorial on How to Do the Same Thing More Than Once. \emph{Psych 2021, }3, 836â€“867.
\end{frame}

\begin{frame}{Reproducibility}
\textbf{Threats to replication of others}
\begin{itemize}
  \item ...
  \item Data not available
  \item Incomplete documentation/reporting
  \item ...
\end{itemize}
\end{frame}


\begin{frame}{Reproducibility}
\textbf{Proposed solutions} (see also Peikert et al., 2021)
\begin{itemize}
  \item Clean code
  \item Version control
  \item Dynamic document generation
  \item (Independent reproduction)
\end{itemize}
\end{frame}

\begin{frame}{Reproducibility}
\textbf{Workshop Goals} \\
Be able to ...
\begin{itemize}
  \item ... reproduce your own research (i.e., analyses)
  \item ... publish your code openly with your research
  \item ... create research which is reproducible for others
  \item ... spread the word
\end{itemize}
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Writing Reproducible R Scripts}

\begin{frame}{Before we start}
\begin{enumerate}
  \item Unzip the workshop-folder
  \item Save the folder on your machine
  \item Browse to the unzipped folder
  \item Open the folder
  \item Open the \textbf{``example-project''} folder
  \item Double click on \textbf{``example-project''} or \textbf{``example-project.Rproj''}
\end{enumerate}
\end{frame}


\begin{frame}{Reproducible Workflow in R \& Rstudio}
\textbf{Key Principles:}
\vspace{-\topsep}
\begin{enumerate}
	  \item Save your code
	  \item Work in projects
	  \begin{itemize}
	    \item Use multiple scripts
	    \item Use multiple projects
	  \end{itemize}
	  \item Frequently and completely restart
	\end{enumerate}
\end{frame}


\subsection{1. Save your code}


\begin{frame}{1. Save your code}
\begin{itemize}
  \item Save the code for preprocessing/data manipulation (don't save intermediate data sets)
  \item Save the code for visualizations (don't save the plots)
  \item Save the code for analyses (don't save the results)
\end{itemize}
\begin{center}
\LARGE
\emph{\color{red}May the source code be with you!}
\end{center}
\visible<2>{\begin{itemize}
  \item Use \texttt{saveRDS()} and \texttt{readRDS()} for objects that require a long time to compute}
\end{itemize}
\end{frame}


\begin{frame}{1. Save your code}
\textbf{Within RStudio}
\vspace{-\topsep}
\begin{enumerate}
  \item Choose \texttt{Tools < Global options}
  \item Under \texttt{General}
  \begin{itemize}
    \item DON'T \texttt{Restore .RData into workspace at startup}
    \item NEVER \texttt{Save workspace to .Rdata on exit:}
    \item Save your script instead!
    \item Use \texttt{saveRDS()} and \texttt{readRDS()} for objects that require a long time to compute
  \end{itemize}
  \item You can further personalize RStudio
  \begin{itemize}
    \item Visually (\texttt{Tools < Global options < appearance})
    \item Keyboard shortcuts (\texttt{Tools < Modify Keyboard Shortcuts...})
    \item ...
  \end{itemize}
\end{enumerate}
\end{frame}


\begin{frame}{1. Save your code}
\textbf{A typical workflow:}
\vspace{-\topsep}
\begin{itemize}
  \item Write your code in scripts in text editor.
  \item Execute lines (or chunks) of code by sending them to the R console.
  \item Add comments using the hash tag \#
  \item Add sections to long scripts (or use multiple scripts)
  \begin{itemize}
	  \item No lines of code are lost when R is shut down or crashes
	  \item Assures reproducible code/coding
	  \item Makes it easy to share your code with colleagues or reviewers
	  \item ...
  \end{itemize}
\end{itemize}
\end{frame}


\begin{frame}{1. Save your code}

\textbf{Explicitly state the packages that you use.}
\begin{itemize}
  \item Load packages on the top of your script.
  \item Use direct access via \texttt{<package-name>::<function-name>}.
  \item Save your session information \texttt{sessionInfo()}.
\end{itemize}

\textbf{Packages...}
\begin{itemize}
  \item have versions (and change)
  \item use the \MYhref{https://CRAN.R-project.org/package=renv}{renv}-package to managa pakage dependencies.
\end{itemize}
\end{frame}



\subsection{2. Work in projects}

\begin{frame}{Reproducible Workflow in R \& Rstudio}
\textbf{Key Principles:}
\vspace{-\topsep}
\begin{enumerate}
	  \item Save your code
	  \item Work in projects
	  \begin{itemize}
	    \item Use multiple scripts
	    \item Use multiple projects
	  \end{itemize}
	  \item Frequently and completely restart
	\end{enumerate}
\end{frame}

\begin{frame}{2. Work in projects}
\textbf{What is a project?}
\vspace{-\topsep}
\begin{itemize}
  \item One designated folder containing all files related to a single (research) project.
  \item When necessary, add sub folders for ...
  \begin{itemize}
      \item data
      \item R scripts
      \item figures and graphs
      \item manuscripts
      \item presentations
      \item ...
  \end{itemize}
  \item The folder contains all relevant files, nothing more.
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
The idea of a project is formalized in an RStudio project.
\vspace{-\topsep}
\begin{itemize}
  \item Technically it is a small text file with \texttt(.Rproj) extension,
  \item which is associated with RStudio.
  \item RStudio recognizes the ``parent folder'' of this file as the project folder
\end{itemize}
\end{frame}



\begin{frame}{2. Work in projects}
Within an RStudio project...
\vspace{-\topsep}
\begin{itemize}
  \item the project folder is automatically set as the \emph{working directory}. \\ try \texttt{getwd()} within a project
  \item \textbf{\color{red}Don't use}
\end{itemize}
<<setwd, eval = FALSE>>=
setwd("path\to\your\local\folder")
@
\end{frame}



\begin{frame}{2. Work in projects}
Use relative paths for reading and writing data. Avoid ...
<<avoid, eval = FALSE>>=
cannot open file 'path\that\only\works\on\my-computer': No such file or directory
@
  \begin{itemize}
  \item With relative paths, code works when ...
  \begin{itemize}
    \item the project folder is moved (or renamed)
    \item you are working on a shared drive
    \item you send your project in a ZIP-folder
  \end{itemize}
  \item useful functions:
  \begin{itemize}
      \item \texttt{?list.dirs}
      \item \texttt{?list.files}
  \end{itemize}
  \item (Or use the \MYhref{https://CRAN.R-project.org/package=here}{here}-package)
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
Keep it clean!
\vspace{-\topsep}
\begin{itemize}
  \item One folder per project
  \item No outside code
  \item No outside computing
  \item Use separate RStudio projects for each project
  \item Use separate Rstudio instances for each Rstudio project
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
How to create an Rstudio project?
\vspace{-\topsep}
\begin{enumerate}
  \item Open Rstudio
  \item Choose \texttt{File < New Project ... }
  \item Choose \texttt{Existing Directory}
  \item Browse to the directory on your machine where you saved the course content and select the ``{example-project-2}'' folder as the \texttt{Project working directory}
  \item Click \texttt{Open in new session}
  \item Click \texttt{Create Project}
\end{enumerate}
\end{frame}




\begin{frame}{2. Work in projects}
Within a project, use multiple source files (scripts) for:
\vspace{-\topsep}
\begin{enumerate}
  \item Preprocessing data
  \item Descriptive analysis
  \item Building models
  \item Hypothesis testing
  \item Making graphs
  \item ...
\end{enumerate}
\end{frame}


\begin{frame}{2. Work in projects}
\textbf{Naming files...}

\textbf{\color{red} NO!}
\vspace{-\topsep}
\begin{itemize}
  \item ``My Abstract.docx''
  \item ``Ana's file for Boris and Casey.csv''
  \item ``new.data from 2-11-2018.txt''
  \item ``fig 2.png''
  \item ``Figure 2 NEW VERSION.png''
\end{itemize}
\textbf{\color{green} YES!}
\vspace{-\topsep}
\begin{itemize}
  \item``2021-11-01\_abstract\_psycon.docx''
  \item ``data\_longitudinal-sleep-study\_version-anna.csv''
  \item ``2020-11-02\_data\_depression-study.txt''
  \item ``fig02\_histogram-residuals.png''
  \item ``fig02\_histogram-residuals\_V2.png''
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
\textbf{Naming files...}

\textbf{\color{red} NO!}
\vspace{-\topsep}
\begin{itemize}
  \item ``analysis\_november\_new.R''
  \item ``someCool\_functions.R''
  \item ``dontUseThis.R''
  \item ``preprocesing\_data\_final.R''
\end{itemize}
\textbf{\color{green} YES!}
\vspace{-\topsep}
\begin{itemize}
  \item ``01\_preprocess-data.R''
  \item ``02\_fit-models.R''
  \item ``03\_make-figures.R''
  \item ``05\_export-table-1.R''
  \item ``99\_utility-functions.R''
\end{itemize}
\end{frame}

\begin{frame}{Naming Files}
Files names should be machine readable and human readable:
\vspace{-\topsep}
\begin{enumerate}
  \item Machine readable
  \begin{itemize}
    \item no spaces
    \item no punctuation
    \item no special characters
    \item logical dates: yyyy-mm-dd
  \end{itemize}
  \item Human readable
  \begin{itemize}
    \item easy to read
    \item content should be clear
  \end{itemize}
  \item Helpful ordering
  \begin{itemize}
    \item chronological
    \item logical
  \end{itemize}
\end{enumerate}
\end{frame}


\begin{frame}{Naming Files}
Some ideas:
\vspace{-\topsep}
\begin{itemize}
  \item use ``\_'' for separating \emph{meta-data}
  \item use ``-'' for separating words
  \item start with date for chronological ordering: yyyy-mm-dd
  \item start with numbers for logical ordering
\end{itemize}
\end{frame}


\begin{frame}{2. Work in projects}
\textbf{Naming files...}

\begin{itemize}
  \item``2021-11-01\_abstract\_psycon.docx''
  \item ``data\_longitudinal-sleep-study\_version-anna.csv''
  \item ``2020-11-02\_data\_depression-study.txt''
  \item ``fig02\_histogram-residuals.png''
  \item ``fig02\_histogram-residuals\_V2.png''
\end{itemize}

\begin{itemize}
  \item ``01\_preprocess-data.R''
  \item ``02\_fit-models.R''
  \item ``03\_make-figures.R''
  \item ``05\_export-table-1.R''
  \item ``99\_utility-functions.R''
\end{itemize}
\end{frame}


\subsection{3. Restart frequently}

\begin{frame}{Reproducible Workflow in R \& Rstudio}
\textbf{Key Principles:}
\vspace{-\topsep}
\begin{enumerate}
	  \item Save your code
	  \item Work in projects
	  \begin{itemize}
	    \item Use multiple scripts
	    \item Use multiple projects
	  \end{itemize}
	  \item Frequently and completely restart
	\end{enumerate}
\end{frame}


\begin{frame}{3. Frequently and Completely Restart}

Regularly completely restart your session. \\

Don't use
<<rm, eval = FALSE>>=
rm(list = ls())
@


\begin{itemize}
  \item start clean, every time
  \item restart to make sure everything reproduces
  \item \texttt{.rs.restartR()}
  \item \texttt{Ctrl + Shift + F10}
\end{itemize}
\end{frame}







\subsection{How To?}

\begin{frame}{How to ... read data}
To analyse data, you have to \emph{read} the data from some file (or connection) and make it an \emph{object} in R.

Almost any type of file can be read by R, via specific functions and packages (\MYhref{https://CRAN.R-project.org/package=reader}{\texttt{reader}},
	\MYhref{https://CRAN.R-project.org/package=haven}{\texttt{haven}},
	\MYhref{https://CRAN.R-project.org/package=readxl}{\texttt{readxl}}, ...).
\vspace{-\topsep}
\begin{itemize}%\itemsep0em
	\item .txt $\rightarrow$ \texttt{read.table()}
	\item .csv $\rightarrow$ \texttt{read.csv(), read.csv2()}
	\item .xls $\rightarrow$ \texttt{readxl::read\_xls()}
	\item .xlsx $\rightarrow$ \texttt{readxl::read\_xlsx()}
	\item .sav $\rightarrow$ \texttt{haven::read\_sav()}
	\item .por $\rightarrow$ \texttt{haven::read\_por()}
	\item .sas $\rightarrow$ \texttt{haven::read\_sas()}
	\item ...
\end{itemize}
\end{frame}




\begin{frame}{How to ... preproces data}
Useful functions in \textbf{Base R}
\vspace{-\topsep}
\begin{itemize}
  \item \texttt{?'['} and \texttt{?'[['}
  \item \texttt{?merge}, \texttt{?reshape}
  \item \texttt{?apply}, \texttt{?tapply}, \texttt{?aggregate},...
  \item \texttt{?sort}, \texttt{?order}
  \item ...
\end{itemize}

Useful functions in \MYhref{https://CRAN.R-project.org/package=dplyr}{\texttt{dplyr}}
\vspace{-\topsep}
\begin{itemize}
  \item \texttt{?filter}, \texttt{?select}, \texttt{?slice}
  \item \texttt{?mutate}, \texttt{?rename}
  \item \texttt{?group\_by}, \texttt{?summarize}, \texttt{?ungroup}
  \item \texttt{?arrange}
  \item \texttt{?inner\_join}, \texttt{?left\_join}, ...
\end{itemize}
\end{frame}

\begin{frame}{How to ... preproces data}
For fast and efficient data wrangling with VERY big data, the  \MYhref{https://CRAN.R-project.org/package=data.table}{\texttt{data.table}}-package can be helpful.
\end{frame}



\begin{frame}{How to ... preproces data}
\begin{center}
\LARGE
\emph{\color{red}Never change raw data!}
\end{center}
If you made some mistakes while  preprocessing raw data $\rightarrow$ change your code and re-run it.\\
\vspace{.5cm}
\textbf{Note that:}
\vspace{-\topsep}
\begin{itemize}
  \item R ``reads'' the data and loads it in the work space.
  \item Hence, manipulating data within R(Studio) does not change the data on your machine. Only the loaded data within the work space is changed.
\end{itemize}
\end{frame}


\begin{frame}{How to ... write data}
When the data (a data.frame, a fitted model, ..) you want to save is for use in R only, use \texttt{saveRDS()} \texttt{readRDS()}.

When the data (a data.frame) is for use by software, several options are available:
\vspace{-\topsep}
\begin{itemize}%\itemsep0em
	\item .txt $\rightarrow$ \texttt{write.table()}
	\item .csv $\rightarrow$ \texttt{write.csv(), write.csv2()}
	\item .sav $\rightarrow$ \texttt{haven::write\_sav()}
	\item .por $\rightarrow$ \texttt{haven::write\_por()}
	\item .sas $\rightarrow$ \texttt{haven::write\_sas()}
	\item ...
\end{itemize}
\textbf{\color{red}WARNING:}\\
R does not prompt a warning when you are about to overwrite an existing file.

$\rightarrow$ Make sure you do not have writing permissions for important raw data. Create Backups.
\end{frame}



\begin{frame}{How to ... save plots}
Only use the RStudio ``Plot''-window for interactive plot making. \\ Don't use it for saving plots.

For reproducible figures, use \texttt{pdf()}, \texttt{png()}, \texttt{jpeg()}, \texttt{tiff()}, ... instead. See \texttt{?jpeg}. \\

Adjust size and aspect ratio using the arguments:
\vspace{-\topsep}
\begin{itemize}
  \item \texttt{width = ...}
  \item \texttt{height = ...}
  \item \texttt{units = ...} $\rightarrow$ the units for the \texttt{width} and \texttt{height} arguments
  \item ...
\end{itemize}
\end{frame}


\begin{frame}[fragile]{How to ... save plots}
<<save-plot, eval = FALSE>>=
z_values <- rnorm(1e+4)
sig_z_values <- z_values[pnorm(abs(z_values),
                               lower.tail = FALSE) < 0.025]
pdf("name_for_this_figure.pdf", width = 10, height = 7)
{
  # all the code that creates the figure
  hist_data <- hist(z_values,
                    main = "Significant Z-values \n(stupid plot)",
                    xlab = "Z-values")
  hist(sig_z_values,
       breaks = hist_data$breaks,
       add = TRUE,
       col = "skyblue")
}
dev.off()
@
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Reproducible Reporting}

\begin{frame}{Common Workflows}
	Not very reproducible...
	\begin{itemize}
		\item Perform data preparation via hand/graphical user interfaces (SPSS, Excel)
		\item Perform data analyses via hand/graphical user interfaces (SPSS, Excel)
		\item Write a research report/manuscript (Word)
		\item Insert your results via copy \& paste in text or as figures/tables
	\end{itemize}
\end{frame}


\begin{frame}{Reproducible Workflows}
Better...
	\begin{itemize}
		\item Perform data preparation via syntax (R, Stata, SPSS)
		\item Perform data analyses via via syntax (R, Stata, SPSS)
		\item Write a research report/manuscript via a typesetting system or markup language (Markdown/LaTeX)
		\item Insert your results via \textit{dynamic document generation} (RMarkdown/knitr)
	\end{itemize}
\end{frame}

\begin{frame}{Markdown}
		Lightweight Markup Language
	\begin{itemize}
		\item Pandoc distributed via RStudio
		\end{itemize}
\end{frame}

\begin{frame}{LaTeX}
		Typesetting System
	\begin{itemize}
		\item Engines (pdflatex, xelatex, lualatex, ...)
		\item Distributions (OS dependent: Miktex, tinytex, ...)
		\item Text editors (Texlive, Texmaker, RStudio...)
	\end{itemize}
\end{frame}

\begin{frame}{LaTeX vs. Markdown}
	\textbf{Advantages LaTeX} \\
	\begin{itemize}
		\item \MYhref{https://ctan.org/pkg/apa7?lang=en}{APA7} document class
		\item Better support for formulas
		\item Looks nicer
		\item Better customization
		\item Designated output format: .pdf
	\end{itemize}
	\MYhref{https://yihui.org/en/2013/10/markdown-or-latex/}{markdown-or-latex}
\end{frame}

\begin{frame}{LaTeX vs. Markdown}
	\textbf{Advantages Markdown} \\
	\begin{itemize}
		\item Extremely easy to use
		\item No complicated setup
		\item Designated output format: .html
	\end{itemize}
	\MYhref{https://yihui.org/en/2013/10/markdown-or-latex/}{markdown-or-latex}
\end{frame}

\subsection{Dynamic Document Generation}
\begin{frame}{Dynamic Document Generation}
Intertwine reporting and data preparation/analyses
	\begin{itemize}
		\item LaTeX $\rightarrow$ knitr (.Rnw)
		\item Markdown $\rightarrow$ RMarkdown (.Rmd)
	\end{itemize}
Execute R code during document generation.
\end{frame}

\begin{frame}{LaTeX and knitr}
\textbf{knitr}
	\begin{itemize}
		\item substitutes \texttt{sweave}
		\item allows embedding R chunks in .tex code (.Rnw)
		\item powerful tool for automated document generation
		\end{itemize}
\end{frame}

\begin{frame}{RMarkdown}
See tomorrow!
\end{frame}

\begin{frame}{Resources}
\textbf{LaTeX resources}
\begin{itemize}
\item Online Tutorials (e.g. \MYhref{https://www.latex-tutorial.com/}{Tutorial})
\item \MYhref{https://www.overleaf.com/learn/latex/Tutorials}{Overleaf}
\end{itemize}

\textbf{knitr Ressources}
\begin{itemize}
\item \MYhref{https://yihui.org/knitr/}{knitr Homepage}
\item \MYhref{https://github.com/yihui/knitr-book}{knitr Book} \\
\end{itemize}

\end{frame}



% --------------
\subsection{Semi-Dynamic Document Generation}
\begin{frame}{Semi-Dynamic Document Generation}
Unfortunately life is not always easy...
	\begin{itemize}
		\item Limited resources to learn even more tools
		\item Collaborators insist on using Word
		\item Journals only accept Word documents for submissions
		\item ...
	\end{itemize}
However, we can always try to make small improvements!
\end{frame}

\begin{frame}{Semi-Dynamic Document Generation}
	For Example: \textbf{Automated APA tables in Word} \\
	$\rightarrow$ Useful R packages
	\begin{itemize}
		\item apaTables
		\item rempsyc
		\item flextable
		\item sjPlot
		\item stargazer
		\item ...
	\end{itemize}
\end{frame}

\begin{frame}{apaTables}
\begin{center}
\includegraphics[width=.95\textwidth]{apaTables_cran.jpg}
\end{center}
\end{frame}


\begin{frame}[fragile]{apaTables}
Descriptive statistics for a data set
<<apaTables, eval = FALSE>>=
apaTables::apa.cor.table(iris,
                         filename = "iris_apatable_descr.doc",
                         landscape = FALSE)
@
\end{frame}

\begin{frame}{apaTables}
\begin{center}
\includegraphics[height=.75\textheight]{apaTables.jpg}
\end{center}
\end{frame}

\begin{frame}[fragile]{apaTables}
Regression tables
<<apaTables2, eval = FALSE>>=
reg1 <- lm(mpg ~ cyl * gear, data = mtcars)
apaTables::apa.reg.table(reg1,
                         filename = "mtcars_apatable_reg.doc")
@
\end{frame}

\begin{frame}{apaTables}
\begin{center}
\includegraphics[height=.75\textheight]{apaTables_reg.jpg}
\end{center}
\end{frame}

\begin{frame}{rempsyc}
\begin{center}
\includegraphics[width=.95\textwidth]{rempsyc_cran.jpg}
\end{center}
\end{frame}


\begin{frame}[fragile]{rempsyc}
Manual table containing example data
<<rempsyc, eval = FALSE>>=
word_table <- rempsyc::nice_table(iris[1:5, ],
  title = c("Table 1", "Example Iris Data Set"),
  footnote = c("The table contains five rows of the iris data."))

# save as .docx
rempsyc::save_as_docx(word_table, path = "iris_rempsyc_data.docx")
@
\end{frame}

\begin{frame}{rempsyc}
\begin{center}
\includegraphics[height=.75\textheight]{rempsyc_iris.jpg}
\end{center}
\end{frame}

\begin{frame}[plain]
\begin{center}
\Large Exercises \\

\vspace{1.5cm}
\includegraphics[height=.25\textheight]{exercises.jpg}
\end{center}
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{RMarkdown}

\begin{frame}{Motivation}
Scientific results should be reproducible! (And hopefully repeatable.)
Open science implies transparency in methodology, manipulation and analysis of data.

RMarkdown is a tool that can facilitate:
\begin{itemize}
    \item \textbf{Reproducible results} by avoiding copy-paste errors
    \item \textbf{Open science} by including the actual code that was used to analyse the data
    \item Revising your work, as changes in data-analytic choices are automatically incorporated in the final output. \textbf{It saves time!}
\end{itemize}
\end{frame}


\begin{frame}{RMarkdown}
Scientific results should be reproducible! (And hopefully repeatable.)
Open science implies transparency in methodology, manipulation and analysis of data.

RMarkdown is a tool that can facilitate:
\begin{itemize}
    \item \textbf{Reproducible results} by avoiding copy-paste errors
    \item \textbf{Open science} by including the actual code that was used to analyse the data
    \item Revising your work, as changes in data-analytic choices are automatically incorporated in the final output. \textbf{It saves time!}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{RMarkdown}
RMarkdown is a \textbf{document format} (.Rmd) that combines
\vspace{-\topsep}
\begin{itemize}
  \item Markdown formatted text
  \item chunks of (R-)code
\end{itemize}

$\rightarrow$ We know R. But what is \emph{Markdown}?
\end{frame}


\subsection{Markdown?}


\begin{frame}{Markdown}
Markdown is a simple formatting language.

It is a \textbf{markup language}:
\vspace{-\topsep}
\begin{itemize}
  \item like html, or \LaTeX
  \item inline formatting "code" is added to text
\end{itemize}

It is \textbf{simple}:
\vspace{-\topsep}
\begin{itemize}
  \item only limited and simple formatting code
  \item the code does not hinder reading raw file
\end{itemize}

$\rightarrow$ easily transformed to other formatting languages
\end{frame}

\subsection{Markdown Formatting Rules}

\begin{frame}[fragile]{Markdown Headings}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE>>=
# Heading level 1


## Heading level 2


### Heading level 3


###### Heading level 6
@
\end{column}
\begin{column}{.5\textwidth}

\vspace{4mm}

{\Huge Heading level 1}

\vspace{7mm}

{\huge Heading level 2}

\vspace{7mm}

{\LARGE Heading level 3}

\vspace{7mm}

{\large Heading level 6}

\end{column}
\end{columns}
\end{frame}



\begin{frame}[fragile]{Markdown Paragraphs}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE, size = "footnotesize">>=
A new line without a blank line
is not considered as a new paragraph.

Only after a complete empty line
a
new
paragraph
is created.
@
\end{column}
\begin{column}{.5\textwidth}

A new line without a blank line
is not considered as a
new paragraph.

\vspace{5mm}

Only after a complete empty line
a
new
paragraph
is created.

\end{column}
\end{columns}
\end{frame}




\begin{frame}[fragile]{Markdown Lists}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE, size = "normalsize">>=
- chocolate
- fruit
  * apples
  * bananas
  * annanas
- vegetables
  + carrots
  + leak
@
\end{column}
\begin{column}{.5\textwidth}
\begin{itemize}
  \item chocolate
  \item fruit
  \begin{itemize}
    \item apples
    \item bananas
    \item annanas
  \end{itemize}
  \item vegetables
  \begin{itemize}
    \item carrots
    \item leak
  \end{itemize}
\end{itemize}

\end{column}
\end{columns}
\end{frame}


\begin{frame}[fragile]{Markdown Numbered Lists}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE, size = "normalsize">>=
a) chocolate
b) fruit
  1. apples
  1. bananas
  1. annanas
c) vegetables
   A. carrots
   D. leak
@
\end{column}
\begin{column}{.5\textwidth}
\begin{enumerate}
  \item[a)] chocolate
  \item[b)] fruit
  \begin{enumerate}
    \item apples
    \item bananas
    \item annanas
  \end{enumerate}
  \item[c)] vegetables
  \begin{enumerate}
    \item[A.] carrots
    \item[B.] leak
  \end{enumerate}
\end{enumerate}

\end{column}
\end{columns}
\end{frame}



\begin{frame}[fragile]{Markdown Inline Formatting}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE, size = "normalsize">>=
*text in italics*
**bold text**
`typewriter / code`
~~strike out~~
text in ^superscript^
text in ~subscript~
[underlined text]{.underline}
@
\end{column}
\begin{column}{.5\textwidth}

\vspace{4mm}

\emph{text in italics}

\textbf{bold text}

\texttt{typewriter / code}

\sout{strike out}

text in \textupperscript{superscript}

text in \textunderscript{subscript}

\underline{underlined text}

\end{column}
\end{columns}
\end{frame}



\begin{frame}[fragile]{Markdown Block Quote}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE>>=
> Block quotes are
easy to make.
>
> They can contain lists
>
>   1. like
>   1. this
@
\end{column}
\begin{column}{.5\textwidth}
\begin{quote}
Block quotes are easy to make.

They can contain lists
\begin{enumerate}
  \item like
  \item this
\end{enumerate}
\end{quote}
\end{column}
\end{columns}
\end{frame}




\begin{frame}[fragile]{Markdown Code Block}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE, size = "footnotesize">>=
```
# an R code block
ab <- a + b
if(ab > 1){
  print("Too Big!")
} else if(ab < -1){
  print("Too Small!")
}
x <- 1:1000
y <- x^ab
```
@
\end{column}
\begin{column}{.5\textwidth}
\lstset{language=R}
\begin{lstlisting}
# an R code block
ab <- a + b
if(ab > 1){
  print("Too Big!")
} else if(ab < -1){
  print("Too Small!")
}
x <- 1:1000
y <- x^ab
\end{lstlisting}
\end{column}
\end{columns}
\end{frame}



\begin{frame}[fragile]{Markdown Links}
\begin{columns}
\begin{column}{.70\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.30\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.70\textwidth}
<<eval = FALSE>>=
<https://google.com>
[inline link](https://bookdown.org/yihui/rmarkdown/)
[e-mail](mailto:dries.debeer@ugent.be)
@
\end{column}
\begin{column}{.30\textwidth}

\vspace{4mm}

\MYhref{https://google.com}{https://google.com}

\MYhref{https://bookdown.org/yihui/rmarkdown/}{inline link}

\MYhref{mailto:dries.debeer@ugent.be}{e-mail}
\end{column}
\end{columns}
\end{frame}


\begin{frame}[fragile]{Markdown Figures}
\begin{columns}
\begin{column}{.6\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.4\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.6\textwidth}
<<eval = FALSE>>=
![Monkey](https://st2.depositphotos.com
          /2927537/7025/i/600/deposit
          photos_70253417-stock-photo-
          funny-monkey-with-a-red.jpg)
@
\end{column}
\begin{column}{.40\textwidth}.

\vspace{5mm}
\begin{figure}
\includegraphics[height=.40\textheight]{monkey.jpg}
\caption{Monkey}
\end{figure}
\end{column}
\end{columns}
\end{frame}




\begin{frame}[fragile]{Markdown Tables}
\begin{columns}
\begin{column}{.5\textwidth}
\textbf{Markdown Code}
\end{column}
\begin{column}{.5\textwidth}
\textbf{Rendered Text}
\end{column}
\end{columns}
\begin{columns}
\begin{column}{.5\textwidth}
<<eval = FALSE>>=
Left     Right  Center  Default
------ ------- -------- -------
  some    other     47    .55
values   value  55       .14
here      here    3        .07
------ ------- -------- -------

Table:  Simple table syntax.
The column headers may be omitted.
@
\end{column}
\begin{column}{.5\textwidth}

\begin{table}
\begin{tabular}{ lrcl }
\hline
Left  &   Right &   Center    & Default        \\
\hline
some   & other   &      47     &   .55         \\
values &   value &     55      &      .14      \\
here   &    here &        3    &       .07     \\
\hline
\end{tabular}
\caption{Simple table syntax. The column headers may be omitted.}
\end{table}
\end{column}
\end{columns}
\end{frame}


\begin{frame}{Markdown Dialects}

There are multiple Markdown \emph{dialects}. Although the formatting rules are generally the same, there are small differences.
\begin{itemize}
  \item We presented Pandoc's Markdown.
  \item A comprehensive overview of formatting rules is found \MYhref{https://pandoc.org/MANUAL.html\#pandocs-markdown}{here}
  \item As an example, \MYhref{https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax}{Github} uses its own Markdown \emph{dialect}
\end{itemize}
\end{frame}


\subsection{Pandoc}


\begin{frame}{Pandoc - a Markdown Converter}
Because Markdown has simple formatting rules, it is easy to convert it
to other formatting languages like html, \LaTeX, or .docx.

\MYhref{https://pandoc.org/}{\emph{Pandoc}} is software that does exactly this.

When the \MYhref{https://CRAN.R-project.org/package=rmarkdown}{rmarkdown}-package is installed, you can convert Markdown code into html using one button. Under the hood, Pandoc is used.
\end{frame}


\begin{frame}{Pandoc - a Markdown Converter}
\begin{figure}
\begin{center}
\begin{tikzpicture}[node distance=1cm, auto]
    \node (init) {};
    \node [block] (Markdown) {Markdown File};
    \node [block, right=3cm of Markdown] (Output) {Output Format: html, latex, word, };
    \path [edge] (Markdown) -> node [text width=2.5cm,midway,above,align=center ] {Pandoc} (Output);
\end{tikzpicture}
\end{center}
\caption{Pandoc converts Markdown Files}
\label{fig1}
\end{figure}
\end{frame}


\subsection{Exercises}

\begin{frame}[plain]
\begin{center}
\Large Exercises \\

\vspace{1.5cm}
\includegraphics[height=.25\textheight]{exercises.jpg}
\end{center}
\end{frame}


\begin{frame}{Exercise}
\textbf{Edit a Markdown document}
\begin{enumerate}
  \item Open the RStudio project named ``Rmarkdown''.
  \item Open ``Exercise-1.md''.
  \item Edit the markdown file so that it includes:
  \begin{itemize}
    \item multiple headings
    \item a link to an existing webpage
    \item a figure or a table
    \item a footnote
  \end{itemize}
  \item click the ``Preview'' button, and create an html version.
\end{enumerate}
\end{frame}


\begin{frame}{Alternative Exercise}
\textbf{Create a new Markdown document in RStudio}
\begin{enumerate}
  \item In RStudio: \texttt{File} $>$ \texttt{New File} $>$ \texttt{Markdown File} .
  \item Edit the markdown file so that it includes:
  \begin{itemize}
    \item multiple headings
    \item a link to an existing webpage
    \item a figure or a table
    \item a footnote
  \end{itemize}
  \item click the ``Preview'' button, and create an html version.
\end{enumerate}
\end{frame}


\begin{frame}{Markdown}
Where and when should I use Markdown?

\begin{itemize}
  \item In README files (not only on Github)
  \item In RMarkdown documents!
  \item ...
\end{itemize}

\end{frame}



\section{RMarkdown  II}


\begin{frame}[fragile]{RMarkdown}
RMarkdown is a \textbf{document format} (.Rmd) that combines
\vspace{-\topsep}
\begin{itemize}
  \item Markdown formatted text
  \item chunks of (R-)code
\end{itemize}

$\rightarrow$ Idea of \MYhref{https://en.wikipedia.org/wiki/Literate\_programming}{\emph{Literate Programming}}.

Because code (for data-analysis) is embedded in the text, changes in the code (for data-analysis) are automatically included in the text when rendered.

$\rightarrow$ \textbf{Reproducibility!}
\end{frame}


\begin{frame}[fragile]{RMarkdown}
\MYhref{https://CRAN.R-project.org/package=rmarkdown}{rmarkdown} is also an R-package made to work with RMarkdown (.Rmd) files.
\vspace{-\topsep}
\begin{itemize}
  \item Has an RStudio integration
  \item The engine for rendering/exporting RMardown documents is \MYhref{https://CRAN.R-project.org/package=knitr}{knitr}
\end{itemize}
\end{frame}


\subsection{RMarkdown Document}

\begin{frame}[fragile]{An RMarkdown Document}
An RMarkdown document has three basic components
\begin{enumerate}
  \item Meta-data (YAML-section)
  \item Text (in Markdown format)
  \item Code (for instance R-code, in chunks)
\end{enumerate}
\end{frame}

\subsection{1. Meta-data}

\begin{frame}[fragile]{1. Meta-data - YAML}
You can find the meta data
\begin{itemize}
  \item on top of the document
  \item between \verb+---+
  \item in YAML (= YAML ain't markup language)
\end{itemize}
<<eval = FALSE>>=
---
title: "Markdowm is Fun"
author: "Dries Debeer"
output: html_document
---
@
\end{frame}


\begin{frame}[fragile]{Output Format}
The YAML header specifies the output-format
\begin{itemize}
  \item Document
  \begin{itemize}
    \item .html
    \item .pdf (via latex)
    \item .docx
  \end{itemize}
  \item Presentation
  \begin{itemize}
    \item .html (ioslides or slidy)
    \item .pdf (via latex beamer)
    \item .pptx
  \end{itemize}
  \item Shiny-app
  \item Blog
  \item Book
  \item Website
  \item ...
\end{itemize}
\end{frame}


\begin{frame}[fragile]{Output Format}
Supported output formats in the YAML header are:
<<eval = FALSE>>=
context_document         beamer_presentation
github_document          ioslides_presentation
html_document            powerpoint_presentation
latex_document           slidy_presentation
md_document
odt_document
pdf_document
rtf_document
word_document
@
More output formats via extension packages (\MYhref{https://CRAN.R-project.org/package=blogdown}{blogdown}, \MYhref{https://CRAN.R-project.org/package=bookdown}{bookdown}, ...)
\end{frame}



\begin{frame}[fragile]{1. Meta-data - YAML}
The YAML header
\begin{itemize}
  \item can contain many options
  \item can be edited by hand
  \item BUT, a YAML header is automatically created in RStudio
\end{itemize}

In RStudio: \texttt{File} $>$ \texttt{New File} $>$ \texttt{R Markdown File}
\end{frame}


\subsection{2. Markdown Text}


\begin{frame}[fragile]{2. Text - Markdown}
Below the YAML header, you can add text in the Markdown format.

All the formatting rules above apply!
\end{frame}


\subsection{3. Code Chunks}


\begin{frame}[fragile]{3. Code Chunks - R}

Code Chunks
\begin{itemize}
  \item Contain executable code (R code)
  \item Between \verb+```+
\end{itemize}
<<eval = FALSE>>=
```{r}
library(car)
y <- rnorm(20)
```
@

\end{frame}


\begin{frame}[fragile]{3. Code Chunks - R}
\textbf{In RStudio} you can add a new chunk using
\begin{itemize}
  \item \texttt{Ctrl + Alt + I}
  \item click the green ``insert'' bottom at the top of the editor pane
\end{itemize}
\end{frame}


\begin{frame}[fragile]{3. Code Chunks - R}
\textbf{Chunk name}

Although knitr automatically generates a chunk name. Often it helps to name each chunk.

<<eval = FALSE>>=
```{r create-y}
y <- rnorm(20)
```
@

\begin{itemize}
  \item Helps for finding errors.
  \item Each chunk requires a unique name.
\end{itemize}
\end{frame}


\begin{frame}[fragile]{3. Code Chunks - R}
\textbf{Chunk options}

<<eval = FALSE>>=
```{r create-y, eval = TRUE, echo = FALSE}
y <- rnorm(20)
```
@

For a complete overview of chunk options look \MYhref{https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf}{here} and \MYhref{https://yihui.org/knitr/options/}{here}.


\end{frame}


\begin{frame}[fragile]{Chunk Options}
\begin{center}
\footnotesize
  \begin{tabular}{| l | l | l | p{5cm} |}
    \hline
Name		& Value 		& Related to 				& Description \\
\hline
\texttt{eval} 		& \texttt{TRUE} 		& code evaluation 	& If FALSE, knitr will NOT run the code in the chunk. \\
\hline
\texttt{include} 	& \texttt{TRUE} 		& code evaluation 	& If FALSE, knitr will run the chunk but not include the chunk in the final document. \\
    \hline
\texttt{fig.align} 	& \texttt{``default''} 	& plots 				& How to align graphics in the final document. One of ``left'', ``right'', or ``center''. \\
    \hline
\texttt{fig.cap} 	& \texttt{NULL} 		& plots 				& A character string to be used as a figure caption. \\
    \hline
\texttt{fig.height} 	& 7 			& plots 				& The height for plots created by the chunk (in inches). \\
    \hline
\texttt{fig.width} 	& 7 			& plots 				& The width for plots created by the chunk (in inches). \\
    \hline
  \end{tabular}
\end{center}
\end{frame}




\begin{frame}[fragile]{Chunk Options}
\begin{center}
\footnotesize
  \begin{tabular}{| l | l | l | p{6cm} |}
    \hline
Name		& Value 		& Related to 				& Description \\
\hline
\texttt{echo} 		& \texttt{TRUE} 		& results 			& If FALSE, knitr will not ``echo'' the code in the chunk above itâ€™s results in the final document. \\
\hline
\texttt{results} 	& \texttt{``markup''} 	& results 			& If ``hide'', knitr will not display the code's results in the final document. If ``hold'' ,knitr will delay displaying all output pieces until the end of the chunk. If ``asis'', knitr will pass through results without reformatting them (useful if results return raw HTML,etc.) \\
\hline
\texttt{message} 	& \texttt{TRUE} 		& results 			& If FALSE, knitr will not display any messages generated by the code. \\
\hline
\texttt{warning}     & \texttt{TRUE} 		& results 			& If FALSE, knitr will not display any warning messages generated by the code. \\
    \hline
  \end{tabular}
\end{center}
\end{frame}


\subsection{3.5 Inline Code}


\begin{frame}[fragile]{3.5 Inline Code}

It is also possible to add R-output inline.
\begin{itemize}
  \item In the middle of the Markdown text
  \item via \verb+`r <R-expression>`+
\end{itemize}

<<eval = FALSE>>=
### Data Description
There is one variable with `r length(y)` observations. The mean
is `r round(mean(y), 2)` (SD = `r round(sd(y), 2)`).
@
\end{frame}

\subsection{Rendering RMarkdown}


\begin{frame}[fragile]{Rendering RMarkdown}
An RMarkdown document contains chunks of R-coded embedded in markdown text.

\textbf{knitr} executes the code chunks \textbf{In a new R-session}, transforms the results into markdown formatted text that replace the code chunks.

\textbf{pandoc} converts the Markdown text (include the results of the code) into the chosen output format (like html).

\end{frame}


\begin{frame}[fragile]{Rendering RMarkdown}
\begin{figure}
\begin{center}
\begin{tikzpicture}[node distance=1cm, auto]
    \node (init) {};
    \node [block] (Markdown) {Markdown File};
    \node [block, left=3cm of Markdown] (RMarkdown) {RMarkdown File};
    \node [block, right=3cm of Markdown] (Output) {Output Format: html, latex, word, };
    \path [edge] (Markdown) -> node [text width=2.5cm,midway,above,align=center ] {Pandoc} (Output);
    \path [edge] (RMarkdown) -> node [text width=2.5cm,midway,above,align=center ] {knitr} (Markdown);
\end{tikzpicture}
\end{center}
\caption{Rendering RMarkdown}
\label{fig2}
\end{figure}

\end{frame}


\begin{frame}[fragile]{Rendering RMarkdown}
To create the output file you can:

\begin{itemize}
  \item Use the \emph{knit} button on top of the editor pane
  \item Hit \texttt{Ctrl + Shift + K}
  \item Enter \texttt{rmarkdown::render(``path/to/file.Rmd'')} in the console
\end{itemize}

To get an idea what is happening behind the scene, try out \texttt{knitr::knit(``path/to/file.Rmd'')}.

$\rightarrow$ The result is a \textbf{Markdown} document based on the \textbf{RMarkdown} document.
\end{frame}



\begin{frame}[fragile]{Rendering RMarkdown}

\textbf{Advice:} Use the shortcut \texttt{Ctrl + Shift + K} or the \emph{knit} button.

They make sure that the \emph{knitting} is done in a new R session.
\begin{itemize}
  \item Objects in the work space of the current R-session are invisible.
  \item Similar to ``Frequently and completely restart!''
\end{itemize}
\end{frame}


\subsection{Exercises}

\begin{frame}[plain]
\begin{center}
\Large Exercises \\

\vspace{1.5cm}
\includegraphics[height=.25\textheight]{exercises.jpg}
\end{center}
\end{frame}



\begin{frame}[fragile]{Exercise}
\textbf{Create an R Markdown document} in RStudio
\begin{enumerate}
  \item Try out different output formats
  \item Add or change a code chunk
  \item Add or change a code chunk that results in a plot
  \item Try out different chunk options
  \item Add an R result inline
\end{enumerate}
\emph{knit} after you made changes to see how the output file is changed.
\end{frame}


\begin{frame}[fragile]{Alternative Exercise}
\textbf{Open ``Rmarkdown-example.Rmd''} in ``example-project\_2''
\begin{enumerate}
  \item Try out different output formats
  \item Add or change a code chunk
  \item Add or change a code chunk that results in a plot
  \item Try out different chunk options
  \item Add an R result inline
\end{enumerate}
\emph{knit} after you made changes to see how the output file is changed.
\end{frame}

\subsection{Tables}

\begin{frame}[fragile]{What About Tables?}
With the \texttt{knit::kable()} function in a code chunk, you can add a table to the rendered document.


<<eval = FALSE>>=
```{r create-y, eval = TRUE, echo = FALSE}
y <- rnorm(20)
knitr::kable(t(summary(y)),
            digits = 2,
            caption = "Summary of Y")
```
@


\end{frame}

\begin{frame}[fragile]{What About Tables?}
The result of using \texttt{knit::kable()}, is a Markdown formatted table, which can than be converted to the chosen output format


<<eval = FALSE>>=
Table: Summary of Y

|  Min.| 1st Qu.| Median|  Mean| 3rd Qu.| Max.|
|-----:|-------:|------:|-----:|-------:|----:|
| -2.12|   -0.64|  -0.21| -0.02|    0.75| 1.51|
@

\end{frame}

\begin{frame}[fragile]{What About Tables?}

For more formatting options for tables, the \MYhref{https://CRAN.R-project.org/package=kableExtra}{kableExtra}-package is available.

\end{frame}

\subsection{Conclusion}

\begin{frame}{RMarkdown}
Where and when should I use RMarkdown?

\begin{itemize}
  \item For sharing work with collaborators.
  \item For presenting results
  \item For writing a submission ready publication (\MYhref{http://frederikaust.com/papaja_man/}{papaja})?
  \item ...
\end{itemize}

My take:
\begin{itemize}
  \item I use RMarkdown when I collaborate.
  \item For anything between (first) data processing and writing the final submission.
  \item Not for (first) data processing $\rightarrow$ R-scripts
  \item Writing the final submission $\rightarrow$ \LaTeX
\end{itemize}
\end{frame}


\begin{frame}{RMarkdown}
There are many more features and possibilities

\begin{itemize}
  \item Creating multiple similar reports via a loop.
  \item Including citations using a BibTex database
  \item Interactive documents
  \item ...
\end{itemize}

Learn all about it in \MYhref{https://bookdown.org/yihui/rmarkdown/}{The Defenitive Guide}.

\end{frame}

% ----------------------------------------------------------------------------------------------------------------------
\section{Version Control via Git and Github}


\begin{frame}{Version Controlling}
\begin{itemize}
  \item Motivation
  \item Setup
  \item Work Flows
  \item Recommendations
  \item Resources
\end{itemize}
\end{frame}

% ----
\subsection{Motivation}

\begin{frame}{Motivation}
\begin{center}
\includegraphics[height=.75\textheight]{why_version_control.jpg}
\end{center}
\end{frame}

\begin{frame}{Motivation 1}
\textbf{Single Author Projects}
\begin{itemize}
  \item Implementation of long term change history
  \begin{itemize}
    \item What has been changed?
    \item When was it changed?
  \end{itemize}
  \item No ridiculous file names
  \item No archive sub folder
  \item Accessibility for others ('Open Science')
  \item Additional safety net
  \item ...
\end{itemize}
\end{frame}

\begin{frame}{Motivation 2}
\textbf{Collaborations}
\begin{itemize}
  \item Who has changed what when exactly?
  \item Clear, current project state
  \item No annoying mail attachments or file-sharing platforms
  \item Parallel work easily possible
  \item Possibility of hierarchical responsibilities
  \item ...
\end{itemize}
\end{frame}

\begin{frame}{But...}
\begin{center}
\includegraphics[height=.75\textheight]{git_no_idea.png}
\end{center}
\end{frame}

% ---
\subsection{Setup}

\begin{frame}{Prerequisits}
\begin{itemize}
  \item Git-Installation
  \item RStudio-Installation (git user interface) \\
  $\rightarrow$ Alternatives: Shell, Gitkraken, SmartGit, ...
  \item Github account (online repository)\\
  $\rightarrow$ Alternatives: Bitbucket, Gitlab, ...
  \item Connect everything
\end{itemize}
\end{frame}

\begin{frame}{Register at Github}
\MYhref{https://github.com/}{Github}
\begin{center}
\includegraphics[width=.7\textwidth]{github_register.JPG}
\end{center}
\end{frame}

\begin{frame}{Download git}
\MYhref{https://git-scm.com/download/win}{Download Git}
\begin{center}
\includegraphics[width=.9\textwidth]{git_download.JPG}
\end{center}
\end{frame}

\begin{frame}{Install git}
Install git into a folder in which you have sufficient rights (user folder if necessary)
\begin{center}
\includegraphics[width=.9\textwidth]{git_installation.JPG}
\end{center}
\end{frame}

\begin{frame}[fragile]{Configure git}
git can be configured for Github via R

<<git setup, eval = FALSE>>=
# if necessary, install usethis
# install.packages("usethis")

library(usethis)
use_git_config(user.name = "Username",
               user.email = "user@gmail.com")
@
\end{frame}

\begin{frame}[fragile]{Configure git}
Check if the configuration was successful via the command line (cmd).
<<git check, eval = FALSE>>=
git config --global --list
@
\end{frame}

\begin{frame}{Connect git and RStudio}
\begin{center}
\includegraphics[height=.75\textheight]{gitpfad.png}
\end{center}
\end{frame}

\begin{frame}{PAT for HTTPS}
How does Github now we should have access to our repositories? \\
$\rightarrow$ via a \textbf{P}ersonal \textbf{A}ccess \textbf{T}oken for HTTPS
\begin{itemize}
\item Go to \MYhref{https://github.com/settings/tokens}{https://github.com/settings/tokens}
\item add the scopes ``repo'', ``user'', and ``workflow''
\item Generate the token
\item Use this token as a password if RStudio asks you
\item Use \texttt{gitcreds::gitcreds\_set()}
\end{itemize}
\end{frame}

\begin{frame}{RStudio}
The RStudio user interface to Git looks like this
\begin{center}
\includegraphics[width=.9\textwidth]{rstudio_git2.JPG}
\end{center}
\end{frame}

% ----
\subsection{Work Flows}

\begin{frame}{Work flow 1}
\textbf{Creating a repository}
\begin{itemize}
  \item Create an \textbf{online repository} (e.g. on Github)
  \begin{itemize}
    \item Use an R specific \texttt{.gitignore}
    \item Initialize with a short readme (\texttt{.md})
  \end{itemize}
  \item Clone the repository to your local machine via RStudio as a new project
    \begin{itemize}
    \item $\rightarrow$ New project
    \item $\rightarrow$ Version Control
    \item $\rightarrow$ git
  \end{itemize}
  \item An R-Project is added automatically to the existing repository
\end{itemize}
\end{frame}

\begin{frame}{Excursion: gitignore}
\begin{itemize}
  \item Plain text file
  \item Which files should not be tracked by git? \\
  $\rightarrow$ These then only exist locally in their current version!
  \item Options
  \begin{itemize}
    \item Single files
    \item Folders
    \item Specific data types
    \item Combinations of the above
  \end{itemize}
  \item Use cases
    \begin{itemize}
    \item Large files (Data, images, ...)
    \item Auxiliary files (e.g. created during latex compilation)
  \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}{Work flow 2}
\textbf{Working with an existing repository}
\begin{itemize}
  \item Before working: Synch your local repo (\textbf{Pull} or \textbf{clone})
  \item Perform changes in your local repository \\
  $\rightarrow$ Create/modify/delete files
  \item \textbf{Stage} your changes
  \item \textbf{Commit} your changes (aka new version)
  \item \textbf{Push} your commit(s) (online repository is updated)
\end{itemize}
\end{frame}

\begin{frame}{Excursion: merge}
\textbf{Conflicts between different updated versions}
\begin{itemize}
  \item Common when working collaboratively
  \item Discrepancies between your own different local repos
  $\rightarrow$ Git communicates these and indicates conflicts
  \item Select the desired changes
  \item Stage selection, commit and push
\end{itemize}
\end{frame}


\begin{frame}{Excursion: Branches}
\textbf{Multiple parallel versions of a project within one repository}
\begin{itemize}
  \item Common e.g. in areas like software development
  \item e.g. one stable and one development branch
  \item Only certain modifications should be made in the stable branch
  \item \textbf{Note}: RStudio GUI has limited support for this
\end{itemize}
\end{frame}

% ---
\subsection{Recommendations}

\begin{frame}[plain]
\begin{center}
\huge Your impressions?
\end{center}
\end{frame}


\begin{frame}{Recommendations}
\begin{itemize}
  \item Keep it simple!
  \begin{itemize}
    \item If not necessary, no branches/forks/pull requests
  \end{itemize}
  \item Have meaningful commits
  \item Keep it lean (no big files)
  \item Avoid using the Github homepage for working within the repository
\end{itemize}
\end{frame}

% -----
\subsection{Resources}

\begin{frame}{Resources}
\textbf{Git + RStudio Resources}
\begin{itemize}
\item \MYhref{https://r-bio.github.io/intro-git-rstudio/}{Small Intro}
\item \MYhref{https://happygitwithr.com/}{Happy Git with R}
\item \MYhref{https://r-pkgs.org/git.html}{R Packages and Git }
\end{itemize}

\textbf{General Git Resources}
\begin{itemize}
\item \MYhref{http://git-scm.com/book/en/v2}{Git Book}
\end{itemize}

\end{frame}


\begin{frame}[plain]
\begin{center}
\Large Exercises \\

\vspace{1.5cm}
\includegraphics[height=.25\textheight]{exercises.jpg}
\end{center}
\end{frame}

\begin{frame}{Exercises}
\begin{itemize}
  \item Create an example repository
  \item Create some descriptive analysis of the \texttt{mtcars} data set
  \item Version control your work
\end{itemize}
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Good programming practices}
\label{sec:good}

\subsection{Code Style}

\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``Write code for humans, not for machines!''}
  \vskip5mm
  \hspace*\fill{\small}
\end{exampleblock}
\end{frame}

\begin{frame}{Code Style}
Invest time in writing readable R-code.
\begin{itemize}
  \item It will make collaborations easier
  \item It will make debugging easier
  \item It will make your analyses more reproducible
\end{itemize}
There is a complete \emph{tidyverse} style-guide \MYhref{https://style.tidyverse.org/}.
\end{frame}

\subsection{Go easy on your eyes}

\begin{frame}{Go easy on your eyes}
\begin{itemize}
  \item with spaces before and after: \texttt{-  +  /  *  =  <-  <  ==  > }
  \item always use \texttt{<-} for assignments
  \item only use \texttt{=} in function calls
  \item use indentation (largely automatic in RStudio)
  \item \texttt{CamelCaseNames} vs \texttt{snake\_case\_names}
  \item be consistent!
  \item wrap long lines at column 70-80 (Rstudio)
\end{itemize}
\end{frame}

\begin{frame}[fragile]{White space}
<<White space, eval = FALSE>>=
new_var=(var1*var2/2)-5/(var3+var4)

# versus

new_var <- (var1 * var2 / 2) - 5 / (var3 + var4)
@
\end{frame}

\begin{frame}[fragile]{Indentation}
<<Indentation, eval = FALSE, size="footnotesize">>=
for(name in names){formula=as.formula(paste0("y~.-",name))
fit<-lm(formula,data=my_data)
coefs[["name"]]=coef(fit)
print(name)
print(summary(fit))}

# versus

for(name in names){
  formula <- as.formula(paste0("y~.-", name))
  fit <- lm(formula, data = my_data)
  coefs[["name"]] <- coef(fit)
  print(name)
  print(summary(fit))
}
@
\end{frame}

\begin{frame}[fragile]{Wrap long lines}
<<Wrap long lines, eval = FALSE , size="footnotesize">>=
final_results <- data.frame(first_variable =
sqrt(results$mean_squared_error), second_variable =
paste0(results$condition, results$class, sep = ":"),
third_variable = results$bias)

# versus

final_results <- data.frame(
  first_variable = sqrt(results$mean_squared_error),
  second_variable = paste0(results$condition,
                           results$class, sep = ":"),
  third_variable = results$bias)
@
\end{frame}

\subsection{Go easy on your mind}

\begin{frame}{Go easy on your mind}
\begin{itemize}
  \item use meaningful names: ``self-explainable''
  \item always write the formal arguments in function calls (except the first)
  \item benefit from autocompletion (\texttt{<tab>}) => embrace longer names
  \item use \texttt{TRUE} and \texttt{FALSE} not \texttt{T} and \texttt{F}
  \item comment, comment, comment
  \begin{itemize}
    \item NOT what (should be clear from the code)
    \item but why
    \item explain the reasoning, not the code
  \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Use meaningful names}
<<Use meaningful names, eval = FALSE >>=
V <- myFun(m1_B)

# versus

RMSE_age_gender <- get_RMSE(lm_age_gender)
@
\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
Use \texttt{verbs} for functions and \texttt{nouns} for other objects.
\end{block}
\end{frame}

\begin{frame}[fragile]{Write formal arguments}
Benefit from auto completion using \texttt{tab}
<<Write formal arguments, eval = FALSE , size="footnotesize">>=
m1_B <- lm(outcome ~ age*gender,
           exp1, condition_1, freq)

# versus

lm_age_gender <- lm(outcome ~ age * gender,
                    data = exp1,
                    subset = condition_1,
                    weigths = freq)
@
\end{frame}

\begin{frame}[fragile]{Comment, comment, comment}
<<Comment, eval = FALSE , size="footnotesize">>=
## Start every Rscript with a comment that explains
##  what the code in the script does, why it does
##  this, and to which project it belongs.
##  Your future self will be very thankful!
##
## Mention which packages you are using in this Rscript.

## Use sections to separate chunks ----------------------

## Maybe even subsections ===============================

## Recode variables so that missings are coded as "NA"
dat[dat %in% c(99, 999)] <- NA  # missings coded 99 or 999
@
\end{frame}


\begin{frame}[fragile]{Keep your code slim}
Try to limit your \emph{package-dependencies}.

\vspace{0.3cm}

Only load \texttt{library()} the packages that you absolutely need. If you are only using \texttt{dplyr}, it does not make sense to load the complete \texttt{tidyverse}.

\vspace{0.3cm}

\textbf{Controversial:} when possible, use the \texttt{::} operator (and consider not loading the package). \texttt{<package>::<function>}
\begin{itemize}
  \item explicit dependencies
  \item less name conflicts
\end{itemize}
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Wrap Up}

\begin{frame}{General Advice}
\begin{itemize}
\item Investing time in learning R pays off
\item It's a steady learning curve
\item Learn from masters
\item Rewrite important code - the first attempt is usually not the best approach
\end{itemize}
\end{frame}

\begin{frame}{General R Advice}
\begin{itemize}
\item Document well
\item Use a consistent style
\item Write functions
\item Split long functions in smaller ones
\item Write wrappers
\item Use Iteration (don't copy paste)
\item Use matrix operations and vectorized functions instead of loops
\item Use git
\end{itemize}
\end{frame}

\begin{frame}{Literature Recommendations}
R Resources
\begin{itemize}
\item \MYhref{http://adv-r.had.co.nz/}{Avanced R Ed. 1}
\item \MYhref{https://adv-r.hadley.nz/}{Avanced R Ed. 2}
\item \MYhref{https://www.burns-stat.com/pages/Tutor/R_inferno.pdf}{R Inferno}
\item \MYhref{https://r-pkgs.org/}{R Packages}
\item \MYhref{https://mooc.aptikom.or.id/pluginfile.php/1174/mod_resource/content/1/Clean\%20Code_\%20A\%20Handbook\%20of\%20Agile\%20Software\%20C\%20-\%20Robert\%20C.\%20Martin.pdf}{Clean Code}
\end{itemize}

Reproducible Research
\begin{itemize}
\item \MYhref{https://cran.r-project.org/web/views/ReproducibleResearch.html}{CRAN Task View}
\item \MYhref{https://datacarpentry.org/rr-workshop/}{Data Carpentry}
\item \MYhref{https://nceas.github.io/sasap-training/materials/reproducible_research_in_r_fairbanks/}{State of Alaska's Salmon and People}
\end{itemize}

\end{frame}


\begin{frame}[plain]

\begin{center}
\Large Thank you for your attention!

\visible<2>{Questions? Remarks?}
\end{center}

\end{frame}

\end{document}
