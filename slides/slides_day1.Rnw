\documentclass{beamer}
%\documentclass[xcolor=table]{beamer}

%\usepackage{graphicx}
%\usepackage{color}

%\usepackage{alltt}
\usepackage{hyperref}

%\usepackage{amsmath}
%\usepackage{booktabs}
%\usepackage[ansinew]{inputenc}
%\usepackage[utf8]{inputenc}

%\usepackage{bm}

\usepackage[T1]{fontenc}
\usepackage{textcomp}

\usetheme{metropolis}


<<r setup, echo=FALSE, message=FALSE, results="hide">>=
suppressPackageStartupMessages({
  library(knitr)
})

knit_theme$set("acid")
opts_chunk$set(message=FALSE, warning=FALSE)
opts_chunk$set(results="hide")
opts_chunk$set(strip.white = TRUE)
opts_chunk$set(size = "small")
opts_chunk$set(comment = "#")

## R Setup
#load("~/Documents/Workshops/FDZ_Reporting/IQB-LV-2011_SchuelerInnen-Eltern_CF.rda")


# Farben
mLightBrown<-"#EB811B"
econBlue<-"#008BBC"
econRed<-"#C10534"
econBlueD<-"#3E647D"
econRedD<-"#90353B"
@


\begin{document}


\title{Introduction to Programming with R}
\institute{Zurich R Courses}


\author[Dries Debeer \& Benjamin Becker]{Dries Debeer \& Benjamin Becker}
\date{31. September and 01. October 2021}


\begin{frame}
\titlepage
\end{frame}
\addtocounter{framenumber}{-1}

\begin{frame}{Introduction}
\textbf{Who are we?}

\begin{columns}[t]
\begin{column}{.475\textwidth}
\textcolor{mLightBrown}{Dries Debeer}
\end{column}
  \begin{column}{.475\textwidth}
    \textcolor{mLightBrown}{Benjamin Becker}
  \end{column}
\end{columns}

\begin{columns}[t]
\begin{column}{.475\textwidth}
Senior Researcher at itec (imec Research Group at KU Leuven)
  	
\end{column}
\begin{column}{.475\textwidth}
Researcher at IQB (Statistics Department)

  \end{column}
\end{columns}

\vspace{0.5cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}
\href{https://github.com/ddebeer/scDIFtest}{scDIFtest}, \href{https://github.com/ddebeer/permimp}{permimp}, \href{https://github.com/beckerbenj/eatATA}{eatATA}, \href{https://CRAN.R-project.org/package=mstDIF}{mstDIF}
  	
\end{column}
\begin{column}{.475\textwidth}
\href{https://github.com/beckerbenj/eatGADS}{eatGADS}, \href{https://github.com/beckerbenj/eatDB}{eatDB}, \href{https://github.com/beckerbenj/eatATA}{eatATA}, \href{https://github.com/beckerbenj/pisaRT}{pisaRT}

  \end{column}
\end{columns}

\vspace{0.5cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}

\href{mailto:dries.debeer@kuleuven.be}{dries.debeer@kuleuven.be}
  	
\end{column}
  \begin{column}{.475\textwidth}

\href{b.becker@iqb.hu-berlin.de}{b.becker@iqb.hu-berlin.de}

  \end{column}
\end{columns}

\vspace{1.5em}
\end{frame}

\section{Introduction}

\begin{frame}{Introduction}
\textbf{Who are you?}
\begin{enumerate}%\itemsep0em
	\item Institution and Status
	\item Previous knowledge and experience
	\begin{itemize}
	  \item with R
	  \item with other statistic software
	  \item with other programming languages
	\end{itemize}
	\item Specific interest/motivation for this workshop?
\end{enumerate}
\end{frame}


\section{Motivation}

\begin{frame}{Motivation}
	\begin{itemize}
			\item Being more efficient in your research
			\begin{itemize}
			  \item Save time and nerves
			  \item Avoid errors and bugs
			  \item High transfer effect to all projects (with data analyses)
			\end{itemize}
			\item Successful collaborations (with your future self?)
			\item Code as part of paper submissions
	\end{itemize}
\end{frame}

\begin{frame}{Motivation}
	Two of your worst enemies
	\begin{itemize}
			\item Past Self
			\begin{itemize}
			  \item Is the biggest mess in existence
			  \item Did not document anything
			  \item Uses a completely different style of writing code than yourself
			  \item Is the worst collaborator (does not reply to e-mails)
			\end{itemize}
			\item Future Self
			\begin{itemize}
			  \item Has the memory of a goldfish
			  \item Will have zero understanding for your current brilliance
			\end{itemize}
	\end{itemize}
\end{frame}

\begin{frame}{Motivation}
\begin{center}
\includegraphics[width=.6\textwidth]{reinhart_rogoff.PNG}
\end{center}
\end{frame}

\begin{frame}{Motivation}
\begin{center}
\includegraphics[width=.75\textwidth]{bad_code_media.JPG}
\end{center}
\end{frame}

\begin{frame}{Motivation}
\textbf{Concept of Technical Debt}
\begin{itemize}
  \item We write (messy) code for data cleaning/analyses
  \item We decide on data sets/models/graphs/tables/...
  \item We try to publish it, get a major revision
  \item We need to rerun some analyses
  \item Modifying/extending our code is more difficult than it should be
\end{itemize}
\textbf{Trade-off}
\begin{itemize}
  \item Being fast vs. writing (or refactoring) perfect code
\end{itemize}
\textbf{But also}
\begin{itemize}
  \item Write better R code
\end{itemize}

\end{frame}


\section{goal}


\begin{frame}{Goal of this workshop}

\textbf{An introduction to R as a Programming language}
\begin{itemize}
  \item Better practical R skills
  \item Better theoretical understanding of R (and programming)
  \item Different framing: R as a programming language
\end{itemize}
\end{frame}


\begin{frame}{Agenda}
\textbf{Day 1}
\begin{itemize}
  \item Basic elements \& data types of the R language
  \item Flow \& conditional programming
  \item Loops \& iteration
  \item Writing \& using functions (part I)
\end{itemize}

\textbf{Day 1}
\begin{itemize}
  \item Writing \& using functions (part II)
  \item Programming tools in R: run time analysis, debugging, exception handling
  \item Good programming practices
\end{itemize}
\end{frame}


\section{RStudio setup}


\begin{frame}{RStudio setup}
\begin{enumerate}
  \item Copy the course content from the usb-stick to a directory on your machine
  \item Open RStudio
  \item Choose \texttt{File < New Project ... }
  \item Choose \texttt{Existing Directory}
  \item Browse to the directory on your machine where you copied the course content and select the ``Intro-R-programming'' folder as the \texttt{Project working directory}
  \item Click \texttt{Open in new session}
  \item Click \texttt{Create Project}
\end{enumerate}
\end{frame}

\begin{frame}{RStudio setup - optional}
\begin{enumerate}
  \item Choose \texttt{Tools < Global options}
  \item Under \texttt{General}
  \begin{itemize}
    \item DON'T \texttt{Restore .RData into workspace at startup}
    \item NEVER \texttt{Save workspace to .Rdata on exit:}
  \end{itemize}
  \item Further personalize RStudio
\end{enumerate}
\end{frame}

\begin{frame}{Agenda}
\textbf{Day 1}
\begin{itemize}
  \item Basic elements \& data types 
  \item Flow and conditional programming
  \item Loops and iteration
\end{itemize}
\textbf{Day 2}
\begin{itemize}
  \item Functions
  \item Good programming practices
  \item Programming tools in R: run time analysis, debugging, exception handling
\end{itemize}
\end{frame}

\section{Basic elements \& data types}

\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.''}
  \vskip5mm
  \hspace*\fill{\small--- John Chambers}
\end{exampleblock}
\end{frame}

\begin{frame}{Basic elements \& data types}
	\begin{itemize}
			\item What are objects?
			\item Atomic vectors
			\item Vector structures
			\item Subsetting
			\item Replacement
	\end{itemize}
\end{frame}

\subsection{What are objects?}

\begin{frame}{What are objects?}
	\begin{itemize}
			\item Data-structures that can be used in computations
			\item Collections of data of all kinds that are dynamically created and manipulated
			\item Can be very small, or very big. $\rightarrow$ \emph{Everything in R is an object}
			\item Elementary data structures can be combined in more complex data structures
			\item Creating new types of \emph{complex} objects is part of programming in R (S3, S4)
	\end{itemize}
\end{frame}


\subsection{Atomic Vectors}


\subsection{Atomic Vectors}

\begin{frame}{Atomic Vectors - Basic Building Blocks}
\begin{center}
  \begin{tabular}{| l | l |}
    \hline
    \multicolumn{2}{|c|}{Basic object types} \\ \hline
    logical   & \texttt{TRUE}, \texttt{FALSE}, \texttt{NA} \\ 
    integer   & \texttt{1L}, \texttt{142}, \texttt{-5}, ..., \texttt{NA} \\
    double    & \texttt{1.0}, \texttt{1.25784}, \texttt{pi}, ..., \texttt{NA} \\
              & \texttt{NaN}, \texttt{-Inf}, \texttt{Inf} \\
    character & \texttt{"1"}, \texttt{"Some other string"}, ..., \texttt{NA} \\
    \hline
  \end{tabular}
\end{center}
mulitple values in one object $\rightarrow$ \texttt{length()} starting from \texttt{0}
\end{frame}

\begin{frame}{Atomic Vectors - Basic Building Blocks}
Elements of the same type can be combined into an atomic vector using \texttt{c}.
<<combine, echo = TRUE, results = "asis">>=
c(3.3, 2.44, 9, 634)
@
All elements are of the same type!
\end{frame}

\begin{frame}[fragile]{Atomic Vectors - Basic Building Blocks}
An important object type with special behavior is \texttt{NULL}. \\
It is an empty object that can be interpreted as \emph{nothing}. It's length is 0.
<<NULL, echo = TRUE, results = "markup">>=
length(NULL)
@
\texttt{NULL} is mostly used as a default argument in functions, in order to create some default behavior.
\end{frame}


\subsubsection{Useful Functions}


\begin{frame}{Useful Functions}
\texttt{?seq} Creates a vector with a sequence of numerical values.
<<seq, echo = TRUE, results = "asis">>=
seq(0, 10, by = 2)
seq(0, 1, length.out = 11)
seq_along(letters)
seq_len(10)
@
Avoid \texttt{:} when programming!
\end{frame}


\begin{frame}{Useful Functions}
\texttt{?rep} Creates a new vector by repeating the elements of a vector.
<<rep, echo = TRUE, results = "asis">>=
rep(1:3, each = 2)
rep(1:3, times = 2)
rep(c("a", "b", "c"), times = 2)
rep(c("this", "may", "be", "useful", "!"), 1:5)
@
\end{frame}


\begin{frame}{Useful Functions}
\texttt{?paste} Creates a character vector by pasting multiple vectors together.
<<paste, echo = TRUE, results = "asis">>=
paste("one", "big", "string", sep = " ")
paste0("word_", seq(1, 10))
paste(c("ONE", "TWO"), seq(1, 3), sep = " || ", collapse = "_-_")
@
\end{frame}


\begin{frame}{Useful Functions}
\texttt{?unique} Creates a vector with the unique values of a vector.
<<unique, echo = TRUE, results = "asis">>=
unique(c("b", "a", "a", "b"))
@

\texttt{?sort} Creates a sorted version a Vector.
<<sort, echo = TRUE, results = "asis">>=
sort(c("b", "a", NA, "a", "b"))
sort(c("b", "a", NA, "a", "b"), na.last = TRUE)
sort(c(4, 2, 6, 1, 3, 5), decreasing = TRUE)
@
\end{frame}


\subsubsection{Coercion/Conversion}

\begin{frame}[fragile]{Coercion/Conversion}
\textbf{Automatic conversion}: \\
			NULL $\rightarrow$ logical $\rightarrow$ integer $\rightarrow$ double $\rightarrow$ character
<<auto-conversion, echo = TRUE, results = "markup">>=
1 + TRUE
@
\textbf{Explicit conversion}: \\
\texttt{as."type"()} \texttt{as.vector(, mode = "type")}
<<explicit conversion, echo = TRUE, results = "markup">>=
as.logical(0:5)
@
\end{frame}

\begin{frame}[fragile]{atomic vectors - check type}
Check type using: \texttt{is."type"()}
<<as.type, echo = TRUE, results = "markup">>=
is.null(NULL)
@
Check type using: \texttt{typeof()}
<<typeof, echo = TRUE, results = "markup">>=
typeof(TRUE + FALSE)
@
\end{frame}

\subsubsection{Assignment}

\begin{frame}[fragile]{Assignment}
In order to compute with objects efficiently, names can be assigned to the objects using the assignment operator \texttt{<-} (or \texttt{=})
<<assignment, echo = TRUE, results = "markup">>=
my_object <- TRUE
my_object
@
\begin{itemize}
  \item The objects (with references) that are available to a user can be seen in the global environment using \texttt{ls()}.
  \item R overrides previous assignments without a message.
Removed objects (\texttt{rm(objectName)}) cannot be restored. 
\end{itemize} 
$\rightarrow$ \textbf{\emph{May the source code be with you!}}
\end{frame}

\subsubsection{Attributes}

\begin{frame}[fragile]{Attributes}

Attributes can be attached to objects. An attribute: \\ 
\begin{itemize}
  \item has a name
  \item is itself also an object
  \item attributes are easily lost in computations. (One of the reasons to use OOP with classes and methods.)
\end{itemize}
<<attributes, echo = TRUE, results="markup", size="footnotesize">>=
my_object <- structure(5, 
                       my_attribute = "string", 
                       other_attribute = FALSE)
attributes(my_object)
@
\end{frame}

\begin{frame}[fragile]{Attributes}
There are several attributes with a specific use: \texttt{"names"}, \texttt{"dim"}, \texttt{"class"}, \texttt{"levels"}
\begin{itemize}
  \item \texttt{"names"} is a character vector that contains the names of elements of the vector/object. Names can be printed and set using \texttt{names(object) <- }.
  \item \texttt{"dim"} is an integer vector that specifies how we should interpret the vector (i.e., as a matrix, as an array). The dimensions of a vector can be printed and set using \texttt{dim(object) <- }.\\
  $\rightarrow$ a \texttt{matrix} or \texttt{array} is a vector with a \texttt{"dim"} attribute.
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Attributes}
\begin{itemize}
  \item \texttt{"class"} is a character vector that contains class names. Classes can be printed and set using \texttt{class(object) <- }. \\
  See \textbf{Object Oriented Programming (S3)}
  \item \texttt{"levels"} is a character vector that contains the names levels of a factor. Levels can be printed and set using \texttt{levels(factor) <- }.
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Attributes}
A factor in R is actually an integer vector with
\begin{itemize}
  \item a \texttt{"class"} attribute set to \texttt{"factor"}
  \item a \texttt{"levels"} attribute set to the level-labels that correspond to the integer values from 1 to the highest integer value in the integer vector.
\end{itemize}
\end{frame}

\begin{frame}{More Basic Object Types}
\begin{center}
  \begin{tabular}{| l | l |}
    \hline
    \multicolumn{2}{|c|}{More basic object types} \\ \hline
    complex     & \texttt{1 + 2.31i}, ... \texttt{NA} \\ 
    raw         & \texttt{as.raw(2)}, \texttt{charToRaw("a")} \\
    expression  & \texttt{expression(1+1, sum(a, b))} \\ 
    language    & a function call, \texttt{quote(1 + y)}  \\ \hline
    closure     & \texttt{function(x) x - 1}, \texttt{mean}  \\
    builtin     & \texttt{sum},  \texttt{c} \\
    special     & \texttt{for},  \texttt{return} \\ \hline
    environment & an environment \\
    symbol      & \texttt{quote(x)} \\ \hline
    ...         & ... \\
    \hline
  \end{tabular}
\end{center}
\end{frame}

\subsection{Vecture Structures}
\begin{frame}[fragile]{Vector Structures}
\begin{center}
  \begin{tabular}{| l | l |}
    \hline
    \multicolumn{2}{|c|}{More basic object types} \\ \hline
    list        & \texttt{list()}, \texttt{as.list()}, ...  \\    \hline
    matrix      & a \textbf{vector} with \texttt{"dim"} argument: two dimensions \\
                & \texttt{matrix()}, \texttt{as.matrix()} \\ 
                & matrix algebra \\ 
    array       & a \textbf{vector} with with \texttt{"dim"} argument \\            \hline
    data.frame  & a \textbf{list} with vectors of equal length  \\
                & \texttt{data.frame()}, \texttt{as.data.frame()}  \\
    \hline
  \end{tabular}
\end{center}
\end{frame}

\begin{frame}[fragile]{List}
A list is a ``vector'' that can contain any type of elements
\begin{itemize}
  \item the types of elements can differ $\leftrightarrow$ atomic vectors
  \item possible elements including lists $\rightarrow$ recursive
  \item can have attributes
\end{itemize}
<<lists, echo = TRUE, results = "markup", size="footnotesize">>=
my_list <- list("this", 
                a = list(a = c(1:2)))
my_list
@
\end{frame}

\begin{frame}[fragile]{Matrix \& Array}
A matrix or an array is a vector with a \texttt{"dim"}-attribute
\begin{itemize}
  \item mostly usefull for numeric vectors (integer and double)
  \item matrix algebra!  \texttt{t(matrix)}, \texttt{\%*\%}, \texttt{aperm(array)}, ...
  \item matrix has two dimensions, array has $n$ dimensions
  \item \texttt{cbind(vector1, vector2)}
  \item \texttt{rbind(vector1, vector2)}
  \item \texttt{matrix(vector, ncol = 4, nrow = 2)}
  \item \texttt{array(vector), dim = c())}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Data.frame}
A data.frame is a list of (named) vectors of equal length.
\begin{itemize}
  \item has dimensions (but not a \texttt{"dim"}-attribute)
  \item the columns are the vectors
  \item the vectors can be lists (using \texttt{I()}).
  \item a data.frame has row names (but ignore these)
\end{itemize}
\end{frame}


\subsection{Subsetting - Selection}

\subsubsection{Subsetting - Atomic Vectors}

\begin{frame}[fragile]{Subsetting - Atomic vectors}
A subset of elements from a vector can be accessed using \texttt{object[selection]}, where \texttt{selection} is:
\begin{itemize}
  \item a \textbf{logical} vector with the same length of the original vector (\texttt{TRUE}: select; \texttt{FALSE}: don't select)
  \item an \textbf{integer} vector indicating the indexes of the elements to select (or exclude)
  \item a \textbf{character} vector with the names of the elements to select
\end{itemize}
\end{frame}

\begin{frame}{Subsetting - Atomic vectors}
Using a \textbf{logical} vector:
\begin{itemize}
  \item the logical vector should have the same length as the object. If shorter, the logical is repeated; if longer, \texttt{NA}s are added if \texttt{TRUE}. $\rightarrow$ always use the same length!
  \item handy when you want to select based on a condition related to the object values
\end{itemize}
\end{frame}


\begin{frame}[fragile]{Subsetting - Atomic vectors}
Using a \textbf{logical} vector:
<<selection-logical, echo = TRUE, results = "markup">>=
my_object <- c(a = 1, b = 5, c = 3, d = 8)
my_object[my_object > 4]
@
\end{frame}

\begin{frame}{Subsetting - Atomic vectors}
Using an \textbf{integer} vector:
\begin{itemize}
  \item the integer vector can have any length (repeated indices are repeatedly selected)
  \item positive values mean \emph{select}, negative values mean \emph{drop}
  \item positive and negative values cannot be combined
  \item for integers higher than the number of elements in the vector, \texttt{NA}s are added
  \item using \texttt{which()} a logical vector is transformed in an integer vector with the indices of the elements that were \texttt{TRUE}
  \item double elements are truncated towards zero (using \texttt{as.integer()})
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Subsetting - Atomic vectors}
Using an \textbf{integer} vector:
<<selection-integer, echo = TRUE, results = "markup">>=
my_object <- c(a = 1, b = 5, c = 3, d = 8)
my_object[c(1, 2, 1, 2, 1, 2, 1 , 2, 1, 2, 1, 2)]
@
\end{frame}

\begin{frame}{Subsetting - Atomic vectors}
Using a \textbf{character} vector:
\begin{itemize}
  \item the strings that match with the names of the elements in the vector are returned
  \item the character vector can have any length (repeated names are repeatedly selected)
  \item only selection is possible (dropping is not)
  \item strings that are not matched with names return \texttt{NA}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Subsetting - Atomic vectors}
Using a \textbf{character} vector:
<<selection-character, echo = TRUE, results = "markup">>=
my_object <- c(a = 1, b = 5, c = 3, d = 8)
my_object[c("a", "b")]
@
\end{frame}

\begin{frame}[fragile]{Subsetting - Atomic vectors}
A \textbf{sinlge} element from a vector can be accessed using \texttt{object[[selection]]}, where \texttt{selection} is:
\begin{itemize}
  \item an \textbf{integer} value indicating the index of the element to select
  \item a \textbf{character} vector with the name of the element to select
\end{itemize}
<<selection-2, echo = TRUE, results = "markup">>=
my_object <- c(a = 1, b = 5, c = 3, c2 = 8)
my_object[[2]]
@
\end{frame}

\subsubsection{Subsetting - Matrix \& Arrays}

\begin{frame}[fragile]{Subsetting - Matrix \& Arrays}
Because arrays and matrices are atomic vectors (with a \texttt{"dim"} argument), the rules for atomic vectors apply.
\end{frame}

\begin{frame}[fragile]{Subsetting - Matrix \& Arrays}
In addition, selection is possible per dimension:
\begin{itemize}
  \item separated by a comma \texttt{[, ]}
  \item selection via character (match row or column names), integer (row and column number) or logical vectors
  \item the first vector selects the rows, the second the columns (and so on)
  \item dimensions are dropped, unless \texttt{drop = FALSE} 
\end{itemize}
<<selection-matrix 2, echo = TRUE, results = "markup", size="footnotesize">>=
my_matrix <- matrix(c(11, 12, 21, 22), ncol = 2, 
                    dimnames = list(paste0("row", 1:2), 
                                    paste0("col", 1:2)))
my_matrix[,2]
@
\end{frame}

\subsubsection{Subsetting - Matrix \& Arrays}

\begin{frame}[fragile]{Subsetting - Matrix \& Arrays}
Finally, the selection element can also be a matrix (with one column per dimension). Each row in the matrix selects one value.
<<selection-matrix 3, echo = TRUE, results = "markup", size="footnotesize">>=
my_matrix <- matrix(c(11, 12, 21, 22), ncol = 2, 
                    dimnames = list(paste0("row", 1:2), 
                                    paste0("col", 1:2)))
selection_matrix <- rbind(c(1, 1), c(1, 2), c(2, 1))
my_matrix[selection_matrix]
@
\end{frame}

\subsubsection{Subsetting - Vector Structures}

\begin{frame}[fragile]{Subsetting - Lists}
For lists, the rules are similar as for atomic vectors.
\begin{itemize}
  \item \texttt{list[selection]} gives a list (i.e., a subset of the original list)
  \item \texttt{list[[selection]]} gives the element (which can be a list)
  \item \texttt{list[["element\_name"]]} is the same as \texttt{list\$element\_name}
\end{itemize}
<<selection-list, echo = TRUE, results = "markup", size="footnotesize">>=
my_list<- list(a = 1, b = 5, c = 3, d = 8)
is.list(my_list["a"])
is.list(my_list[["a"]])
@
\end{frame}

\begin{frame}[fragile]{Subsetting - data.frames}
Because data.frames are lists, the rules for lists apply. 
<<selection-data.frame 1, echo = TRUE, results = "markup">>=
my_dat <- data.frame(col1 = c(11, 21), 
                     col2 = c(12, 22))
my_dat[1]
@
\end{frame}

\begin{frame}[fragile]{Subsetting - data.frames}
In addition, the selection rules for matrices can be used: 
\begin{itemize}
  \item selection per row and column (note the \texttt{drop} argument)
  \item selection via a matrix with two columns
\end{itemize}
<<selection-data.frame 2, echo = TRUE, results = "markup">>=
my_dat <- data.frame(col1 = c(11, 21), 
                     col2 = c(12, 22))
my_dat[,"col1", drop = FALSE]
@
\end{frame}

\subsection{Element Replacement}

\begin{frame}[fragile]{Element Replacement}
A subset of elements from a vector or vector structure can be replaced using \texttt{object[selection] <- new\_values}:
\begin{itemize}
  \item the modifications are done in place
  \item the structure and class of the object stay unchanged
  \item the length of the new values should correspond with the length of the selection (the number of elements to replace should be a multiple of the number of new values)
  \item only for lists, the replacement can be \texttt{NULL} (which removes the element from the list)
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Element Replacement}
<<replacement, echo = TRUE, results = "markup">>=
my_dat <- data.frame(col1 = c(11, 21), 
                     col2 = c(12, 22))
my_dat[1, 2] <- 33
@
\end{frame}

\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.''}
  \vskip5mm
  \hspace*\fill{\small--- John Chambers}
\end{exampleblock}
\end{frame}

\subsection{Function Calls}

\begin{frame}{Function Calls}
\begin{itemize}
  \item Computing in R happens through function calls. A function is applied to one or more objects, and returns an object after the computation. 
  \item The typical use is: \\ 
  \texttt{function\_name(object1, argument\_name = object2)}
  \item Computations that seem not to be done using functions are actually also functions. Check \texttt{\textasciigrave <-\textasciigrave (a, 5)} or \texttt{\textasciigrave >\textasciigrave (5, 2)}
  \item most functions that seem not to return an object, return it invisibly. Check \texttt{(a <- 5)}.
\end{itemize}
\end{frame}




% ----------------------------------------------------------------------------------------------------------------------
\section{Flow \& conditional programming}


\begin{frame}{Flow \& conditional programming}
R has specific tools (functions) that help organize the flow of computations. \\
You can make computations conditional on other objects (``conditional computation'') 
The most commonly used tools are: 
\begin{itemize}
  \item \texttt{if} (+ \texttt{else})
  \item \texttt{ifelse}
  \item \texttt{switch}
\end{itemize}
\end{frame}

\subsection{if}

\begin{frame}[fragile]{Conditional Computation - if}
\texttt{if} statements have the basic form
<<if, echo=TRUE, eval = FALSE>>=
if(test){
  some_computations
}
@
\begin{itemize}
  \item \texttt{test} should be either \texttt{TRUE} or \texttt{FALSE} (or code that results in one of both). 
  \item If \texttt{test == TRUE}, than \texttt{some\_computations} is executed, if \texttt{test == FALSE}, than not.
  \item \textbf{Important}: \texttt{test} should have length 1. If not, only the first element is considered.\end{itemize}
\end{frame}

\begin{frame}[fragile]{Conditional Computation - if}
\texttt{else} can be added, but it is optional
<<if else, echo=TRUE, eval = FALSE>>=
if(test){
  some_computations
} else if (test_2){
  other_computations
} else {
  more_computations
}
@
\end{frame}

\begin{frame}{Typical test functions}
\textbf{Vectorized} 
\begin{itemize}
  \item \texttt{==}, \texttt{!=}, \texttt{>}, \texttt{>=}, ... 
  \item \texttt{is.na()}
  \item \texttt{\&}, \texttt{|}  
\end{itemize} 
\textbf{Not vectorized} 
\begin{itemize}
  \item \texttt{identical()}
  \item \texttt{all.equal()}
  \item \texttt{\&\&}, \texttt{||}
  \item \texttt{any()}, \texttt{all()}
  \item \texttt{is.character()}, \texttt{is.data.frame()}, ... 
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Conditional Computation - if}
The \emph{test} should have length 1!
<<if3, echo = TRUE, results="markup">>=
# only the first element is evaluated
age <- c(8, 17, 39, 55)
if (age >= 18) {
  "can vote"
} else {
    "too young"
}
@
\end{frame}

\begin{frame}[fragile]{Conditional Computation - if}
Typical uses
<<if typical, echo=TRUE, eval = FALSE, size = "footnotesize">>=
if(any(is.na(x))){
  stop("computation impossible due to NA values")
}

if(!is.integer(vector)){
  warning("'vector' is automatically converted to interger.
          This may affect the results")
  vector <- as.integer(vector)
}

if(is.null(default_argument)){
  <default computations>
} else if (default_argument == specific value) {
  ...
}
@
\end{frame}

\begin{frame}{Conditional Computation - if}
\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
\begin{itemize}
  \item \emph{if} is almost always used inside of functions or loops
  \item If possible, avoid using \emph{else}
  \item Use meaningful initialisation, early return(), stop(), etc. instead
\end{itemize}
\end{block}
\end{frame}

\begin{frame}[fragile]{Conditional Computation - if}
Abbreviation for if(!test) and stop():
<<echo=TRUE, results='asis'>>=
mean2 <- function(x, na.rm = FALSE) {
  stopifnot(is.numeric(x))
  sum(x)/length(x)
}
mean2("a")
@
\end{frame}

\subsection{ifelse}

\begin{frame}[fragile]{Conditional Computation - ifelse}
A vectorized version is \texttt{ifelse()}. \\ 
<<ifelse, echo = TRUE, results="markup">>=
# all elements are evaluated
age <- c(8, 17, 39, 55)
ifelse(age >= 18, yes = "can vote", 
       no = "too young")
@
%\texttt{\textasciigrave if\textasciigrave (test, ifTRUE, ifFALSE)} does exactly the same as \texttt{if (test) {ifTRUE} else {ifFALSE}}
\end{frame}

\begin{frame}[fragile]{Conditional Computation - ifelse}
Go-to tool for conditional recoding
<<ifelse typical, echo=TRUE, results = "markup">>=
age_estimated <- c(10, 20, 35, 60) 
age_self_rep <- c(NA, 17, 39, NA)

# Use available information, prioritize self report
ifelse(!is.na(age_self_rep), yes = age_self_rep, 
       no = age_estimated)

@
\end{frame}

\begin{frame}[fragile]{Conditional Computation - Vectorization}
Pure vectorization can bring you a long way. But it is certainly less readable
<<vectorize2, echo = TRUE, results = "markup">>=
age <- c(8, 17, 39, 55)
c("too young", "can vote")[1 + (age >= 18)]
@
\end{frame}

\subsection{switch}

\begin{frame}[fragile]{Conditional Computation - switch}
\texttt{switch()} is often a more elegant solution than using \texttt{else if ()} multiple times.
<<switch, echo = TRUE, eval = FALSE>>=
method <- "method 5"
switch(method, 
       "method 1" = <computations>,
       "method 2" = <computations>,
       "method 3" = <computations>,
       "method 4" = <computations>,
       "method 5" = <computations>,
       "method 6" = <computations>,
       "method 7" = <computations>,
       "method 8" = <computations>,
       stop("Not an existing method"))
@
\end{frame}

% ----------------------------------------------------------------------------------------------------------------------
\section{Loops \& Iteration}

\begin{frame}{Loops \& iteration}
R has specific tools (functions) that help organize the flow of computations. \\
You can repeat a similar computation multiple times typically with changing options (``iteration'').
The most commonly used tools are: 
\begin{itemize}
  \item loops (\texttt{repeat}, \texttt{while}, \texttt{for})
  \item functionals (\texttt{apply} - family)
\end{itemize}
\end{frame}


\subsubsection{for}

\begin{frame}[fragile]{Loops \& Iteration - for}
\texttt{for} statements have the basic form
<<for, echo=TRUE, eval = FALSE>>=
for (element in vector) {
  computation
}
@
For each element in the vector, the computation is executed. \\
Often, the computation depends on the element in that iteration.
\end{frame}

\begin{frame}[fragile]{Loops \& Iteration - for}
<<for2, echo=TRUE, eval = TRUE, results = "markup">>=
for (index in 1:3){
  cat(" computation -")
}

for (name in c("Alice", "Bob", "Casey")){
  if(name == "Bob") cat(" This was Bob -")
  else cat(" Not Bob -")
}
@
\end{frame}

\begin{frame}[fragile]{Loops \& Iteration - for}
<<for3, echo=TRUE, eval = TRUE, results = "markup">>=
matrix <- matrix(NA, nrow = 2, ncol = 3)
for (rowNr in 1:2){
  for (colNr in 1:3){
    matrix[rowNr, colNr] <- rowNr * 10 + colNr
  }
}
matrix
@
\end{frame}

\subsubsection{while \& repeat}

\begin{frame}[fragile]{Loops \& Iteration - while}
\texttt{while} statements have the basic form
<<while, echo=TRUE, eval = FALSE>>=
while (condition){
  computation
}
@
As long as the condition is TRUE, the computation is executed. \\ Often, the computation depends on something that is related to the condition.
\end{frame}

\begin{frame}[fragile]{Loops \& Iteration - while}
<<while2, echo=TRUE, eval = FALSE>>=
max_abs <- 0
while (max_abs <= 3){
  cat("|")
  values <- rnorm(20)
  max_abs <- max(abs(values))
}
max_abs
@
\end{frame}

\begin{frame}[fragile]{Loops \& Iteration - repeat}
\texttt{repeat} statements have the basic form
<<repeat, echo=TRUE, eval = FALSE>>=
repeat {
  computation
}
@
Without a \texttt{break} the computation is repeated infinite times
\end{frame}

\subsubsection{next \& break}

\begin{frame}[fragile]{Loops \& Iteration - next break}
\begin{itemize}
  \item \texttt{next} starts next iteration
  \item \texttt{break} ends iteration (of the innermost loop)
\end{itemize}
<<next, echo=TRUE, eval = TRUE, results="markup">>=
index <- 0
repeat {
  index <- index + 1
  if (index %in% c(3, 5)) next
  if (index > 6) break
  print(index)
}
@
\end{frame}

\subsubsection{Loops \& Iteration - good practice}

\begin{frame}[fragile]{Iteration - Good practice}
\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
Use \texttt{seq()}, \texttt{seq\_len()}, or \texttt{seq\_along()}.
\end{block}
<<seq2, echo=TRUE, eval = TRUE, results="markup", size="footnotesize">>=
x <- numeric()
for (index in 1:length(x)){
  print(index)
}

for (index in seq_along(x)){
  print(index)
}
@
\end{frame}

\begin{frame}[fragile]{Loops \& Iteration - Good practice}
\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
Don't grow, replace.
\end{block}
<<replace, echo=TRUE, eval = TRUE, results="markup">>=
x <- letters
result1 <- numeric()          # grow
result2 <- numeric(length(x)) # replace
for (index in seq_along(x)){
  result1 <- c(result1, paste(index, x[index]))  # grow
  result2[index] <- paste(index, x[index])       # replace
}
@
\end{frame}

\subsubsection{Functionals}

\begin{frame}{Loops \& Iteration - Functionals}
A functional is a function that takes another function as an argument. \\
Focus on the \texttt{apply}-family. These functions \emph{apply} a function repeatedly. \\
Can be seen as an abstraction of a for loop, with the following advantages
\begin{itemize}
  \item requires less code to write
  \item does not store intermediate results
  \item no need to replace / grow
\end{itemize}
\end{frame}

\begin{frame}{Functionals}
The most commonly used functionals are:
\begin{itemize}
  \item \texttt{lapply} vector / list $\rightarrow$ list
  \item \texttt{sapply} vector / list $\rightarrow$ vector (matrix)
  \item \texttt{apply} matrix / array / data.frame $\rightarrow$ vector (matrix)
  \item \texttt{tapply}, \texttt{by}, \texttt{aggregate}
  \item \texttt{mapply}, \texttt{Map}
  \item \texttt{rapply}, \texttt{eapply}, \texttt{vapply} 
\end{itemize}
All of which have an argument that should be a function.
\end{frame}

\subsubsection{lapply}

\begin{frame}[fragile]{lapply}
Data.frames are lists
<<lapply, echo=TRUE, results="markup", size="footnotesize">>=
lapply(iris, FUN = class)
@
\end{frame}

\begin{frame}[fragile]{lapply}
\begin{itemize}
  \item any type of element can be used
  \item other arguments can be passed through
  \item an annonymous function can be used
\end{itemize}
<<lapply2, echo=TRUE, results="markup", size="footnotesize">>=
lapply(airquality, FUN = mean, rm.na = TRUE)
@
\end{frame}

\subsubsection{sapply}

\begin{frame}[fragile]{sapply}
\begin{itemize}
  \item wrapper around lapply
  \item if possible, the ouput is combined into a atomic vector or matrix
\end{itemize}
<<sapply, echo=TRUE, eval = TRUE, results="markup">>=
sapply(airquality, FUN = sd)
sapply(airquality, FUN = quantile, prob = c(.1, .9), 
       na.rm = TRUE)
@
\end{frame}

\subsubsection{apply}

\begin{frame}[fragile]{apply}
\begin{itemize}
  \item for objects with dimension (matrix, array, data.frame)
  \item apply over (a) chosen dimension(s) 
\end{itemize}
<<apply, echo=TRUE, results="markup", size="footnotesize">>=
my_matrix <- matrix(1:6, nrow = 2)
apply(my_matrix, 1, max)    # apply per row
apply(my_matrix, 2, max)    # apply per column
@
\end{frame}

\begin{frame}[fragile]{apply}
<<apply2, echo=TRUE, results="markup", size="footnotesize">>=
my_array <- array(1, dim = c(2, 3, 4))
apply(my_array, c(1, 2), sum)    # apply per row and column
apply(my_array, 3, sum)  
@
\end{frame}


% ----------------------------------------------------------------------------------------------------------------------
\section{Functions I}

\begin{frame}{Functions I}
\begin{itemize}
  \item Why write functions?
  \item Basics
  \item Arguments
  \item Output
  \item Work flow
\end{itemize}
\end{frame}

\begin{frame}{Building Blocks}
Functions are the building blocks of R code. As frequent users of functions we know that they should:
\begin{itemize}
  \item have a clear purpose
  \item be well documented
  \item be portable
\end{itemize}
\end{frame}

\subsection{Why write functions?}

\begin{frame}{Stepping Stone}
Central stepping stone for R users: Move from solely using functions written by others to writing your own functions. 

\textbf{Reasons:}
\begin{itemize}
  \item Readability
  \begin{itemize}
    \item Shorter
    \item Easier understanding
    \item Removes distractions, like references in a paper
  \end{itemize}
  \item Transferability
  \begin{itemize}
    \item Other use cases
    \item Other projects
    \item Other persons
  \end{itemize}
\end{itemize}
\end{frame}


\begin{frame}[fragile]{Readability}
<<echo=TRUE, results='asis'>>=
mean(mtcars$mpg)
# vs.
sum(mtcars$mpg)/dim(mtcars)[1]
@
\end{frame}

\begin{frame}[fragile]{Readability}
<<echo=TRUE, results='markup'>>=
summary(mtcars$mpg)
@
\end{frame}

\begin{frame}[fragile]{Readability}
<<echo=TRUE, results='markup'>>=
round(c("Min." = min(mtcars$mpg),
  "1st Qu." = as.numeric(quantile(mtcars$mpg)[2]),
  "Median" = median(mtcars$mpg),
  "Mean" = mean(mtcars$mpg),
  "3rd Qu." = as.numeric(quantile(mtcars$mpg)[4]),
  "Max." = max(mtcars$mpg)), 2)
@
\end{frame}

\subsection{Basics}

\begin{frame}{Elements of a function}
\begin{itemize}
  \item Name
  \item Arguments/Formals (input)
  \item Body (what happens inside)
  \item Output 
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Function definition}
<<echo=TRUE, results='asis'>>=
countNA <- function(x) {    # Name, Arguments/Formals
  out <- sum(is.na(x))      # Body
  out                       # Output
}
@
\end{frame}

\begin{frame}{Function Names}
\begin{itemize}
  \item Usually a verb (what does the function do?)
  \item Avoid existing names 
  \item Better longer than unclear
\end{itemize}
\end{frame}

\subsection{Arguments}

\begin{frame}{Arguments}
Usually:
\begin{itemize}
  \item One or two data arguments
  \item Additional Options
\end{itemize}

\metroset{block=fill} %grey blocks
\begin{block}{Programming advice}
The less arguments, the better!
\end{block}
\end{frame}

\begin{frame}[fragile]{Default arguments}
What happens if the user omits an argument?
<<echo=TRUE, results='asis'>>=
add_things_def <- function(x) {
  x + 10
}
add_things_def()
@
\end{frame}

\begin{frame}[fragile]{Default arguments}
What happens if the user omits an argument?
<<echo=TRUE, results='asis'>>=
add_things_def <- function(x = 1) {
  x + 10
}
add_things_def()
@
\end{frame}

\begin{frame}[fragile]{Lazy Evaluation}
Sometimes missing arguments are irrelevant!
<<echo=TRUE, results='asis'>>=
add_things3 <- function(x, y) {
  x + 10
}
add_things3(2)
@
\end{frame}

\subsection{Output}

\begin{frame}{Output}
What does a function return?
\begin{itemize}
  \item (Standard) The last evaluated object 
  \item Object defined by return()
  \item An error via stop()
  \item Additional: Warnings + Messages
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Output}
The last evaluated object
<<echo=TRUE, results='asis'>>=
add_things_standard <- function(x = 1) {
  x2 <- x*2
  out <- x + x2
  out
}
add_things_standard(2)
@
\end{frame}

\begin{frame}[fragile]{Output}
return()
<<echo=TRUE, results='asis'>>=
add_things_return <- function(x = 1) {
  x2 <- x*2
  return(x)
  out <- x + x2
  out
}
add_things_return(2)
@
\end{frame}

\begin{frame}[fragile]{Output}
Error: stop()
<<echo=TRUE, results='asis'>>=
add_things_stop <- function(x = 1) {
  x2 <- x*2
  stop("My own error message")
  out <- x + x2
  out
}
add_things_stop(2)
@
\end{frame}

\begin{frame}[fragile]{Output}
Warnings: warning()
<<echo=TRUE, results='asis', warning=TRUE>>=
add_things_warning <- function(x = 1) {
  x2 <- x*2
  warning("My own warning message")
  out <- x + x2
  out
}
add_things_warning(2)
@
\end{frame}

\begin{frame}[fragile]{Output}
Messages: message()
<<echo=TRUE, results='asis', message=TRUE>>=
add_things_message <- function(x = 1) {
  x2 <- x*2
  message("My own message")
  out <- x + x2
  out
}
add_things_message(2)
@
\end{frame}


\subsection{Work flow}

\begin{frame}{Writing Functions}
  Before creating the function
  \begin{itemize}
    \item What should my function do?
    \item Input (Arguments)
    \item Output
  \end{itemize}
  After creating the function
  \begin{itemize}
    \item Test it
    \item Add input validation
    \item Document it
  \end{itemize}
\end{frame}

\begin{frame}[plain]
\begin{center}
\Large Exercises \\

\vspace{1.5cm}
\includegraphics[height=.25\textheight]{exercises.jpg}
\end{center}
\end{frame}



\begin{frame}[plain]

\begin{center}
\Large That's it for today!

\visible<2>{Questions? Remarks?}
\end{center}

\end{frame}

\end{document}
