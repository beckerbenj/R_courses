\documentclass{beamer}
%\documentclass[xcolor=table]{beamer}

%\usepackage{graphicx}
%\usepackage{color}

%\usepackage{alltt}
%\usepackage{hyperref}

%\usepackage{array}
%\usepackage[originalparameters]{ragged2e} 

% kable packages
%\usepackage{longtable}
%\usepackage{array}
%\usepackage{multirow}
%\usepackage{wrapfig}
%\usepackage{float}
%\usepackage{colortbl}
%\usepackage{pdflscape}
%\usepackage{tabu}
%\usepackage{threeparttable}
%\usepackage{threeparttablex}
%\usepackage[normalem]{ulem}
%\usepackage{makecell}

%\usepackage{amsmath}
%\usepackage{booktabs}
%\usepackage[ansinew]{inputenc}
%\usepackage[utf8]{inputenc}
%\usepackage[ngerman, english]{babel}

%\usepackage{bm}

\usepackage[T1]{fontenc}
\usepackage{textcomp}

\usetheme{metropolis}   

<<r setup, echo=FALSE, message=FALSE, results='hide'>>=
suppressPackageStartupMessages({
  library(knitr)
})

knit_theme$set("acid")
opts_chunk$set(message=FALSE, warning=FALSE)
opts_chunk$set(results="hide")
opts_chunk$set(strip.white = TRUE)
opts_chunk$set(size = "small")
opts_chunk$set(comment = "#")

## R Setup
#load("~/Documents/Workshops/FDZ_Reporting/IQB-LV-2011_SchuelerInnen-Eltern_CF.rda")


# Farben
mLightBrown<-"#EB811B"
econBlue<-"#008BBC"
econRed<-"#C10534"
econBlueD<-"#3E647D"
econRedD<-"#90353B"
@


\begin{document}


\title{Introduction to Programming with R}
\institute{Zurich University}

\author[Dries Debeer \& Benjamin Becker]{Dries Debeer \& Benjamin Becker}
\date{31. September and 01. October 2021}


\begin{frame}
\titlepage
\end{frame}
\addtocounter{framenumber}{-1}

\begin{frame}{Agenda}
\textbf{Day 1}
\begin{itemize}
  \item Basic Elements \& Data Types
  \item Flow \& Conditional Programming
  \item Loops \& Iteration
  \item Functions (Introduction)
\end{itemize}
\textbf{Day 2}
\begin{itemize}
  \item Functions (Advanced)
  \item Debugging
  \item Efficient Programming
\end{itemize}
\end{frame}


\begin{frame}[plain]

\begin{center}
\Large Open questions from day 1?
\end{center}

\end{frame}

% ----------------------------------------------------------------------------------------------------------------------
\section{Functions II}



% ----------------------------------------------------------------------------------------------------------------------
\section{Functions III}

\begin{frame}{Functions III}
\begin{itemize}
  \item Good functions?
  \item dot dot dot
  \item on.exit()
  \item Accessing the call
\end{itemize}
\end{frame}

\subsection{Good functions?}

\begin{frame}{What makes a good function?}
\textbf{Pure functions!}
  \begin{itemize}
    \item no side effects
    \item the only output is returned
    \item no dependency on global environment
    \item only input via arguments
  \end{itemize}
  Results in easier understanding and higher portability.
\end{frame}

\subsection{dot dot dot}

\begin{frame}{...}
How can functions receive flexible numbers of inputs? 

\textbf{Examples:}
  \begin{itemize}
    \item sum()
    \item save()
    \item ...
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{...}
via dot dot dot (...)
<<echo=TRUE, results='asis'>>=
add_all_things2 <- function(...) {
  l <- list(...)
  do.call(sum, l)
}
add_all_things2(2, 3, 5, 10)
@
\end{frame}

\subsection{on.exit()}

\begin{frame}[fragile]{on.exit()}
Performing an action when the function terminates
<<echo=TRUE, results='asis'>>=
add_things <- function(x, y) {
  on.exit(cat("Sum of", x, "and", y))
  x <- x + 20
  x + y
}
out <- add_things(1, 2)
out
@
\end{frame}

\subsection{Accessing the function call}

\begin{frame}[fragile]{Accessing the function call}
Accessing the function call
<<echo=TRUE, results='asis'>>=
showArgs <- function(x, y) {
  match.call()
}
showArgs(1, 2)
@
\end{frame}

% ----------------------------------------------------------------------------------------------------------------------
\section{Debugging}

\begin{frame}{Debugging}
\begin{itemize}
  \item browser()
  \item traceback()
  \item options(error = recover)
  \item options(warn = 2)
\end{itemize}

Also:
\begin{itemize}
  \item trace() \& untrace()
  \item debug() \& undebug(), debugonce()
\end{itemize}
\end{frame}

\subsection{browser}

\begin{frame}[fragile]{browser()}
Inspecting a function interactively
<<echo=TRUE, eval=FALSE>>=
some_function <- function(x, y) {
  z <- x + y
  browser()
  z
}
some_function(x = 1, y = 5)
@
\end{frame}

\begin{frame}{browser()}
\begin{center}
\includegraphics[width=.75\textwidth]{browser.JPG}
\end{center}
\end{frame}

\begin{frame}{browser()}
Navigating within a browser:
\begin{itemize}
  \item [ls()] Show existing objects in the current environment
  \item [c] Exit the browser and continue execution
  \item [Q] Exit the browser, return to top level
  \item [where] Show call stack
\end{itemize}
\end{frame}

\subsection{traceback}

\begin{frame}{traceback()}
Understanding the call stack:
\begin{center}
\includegraphics[width=.75\textwidth]{traceback.JPG}
\end{center}
\end{frame}

\begin{frame}{traceback()}
Understanding the call stack:
\begin{center}
\includegraphics[height=.75\textheight]{traceback2.JPG}
\end{center}
\end{frame}

\subsection{recover}

\begin{frame}[fragile]{Recover}
Being able to chose an environment from the call stack:
<<echo=TRUE, eval=FALSE>>=
# on
options(error = recover)

# off
options(error = NULL)
@
\end{frame}

\begin{frame}{Recover}
Being able to chosse an enrivonment from a call stack:
\begin{center}
\includegraphics[width=.75\textwidth]{recover.JPG}
\end{center}
\end{frame}

\subsection{warnings}

\begin{frame}[fragile]{Warnings}
Turning warnings into errors
<<echo=TRUE, eval=FALSE>>=
# on
options(warn = 2)

# off
options(warn = 1)
@
\end{frame}

\begin{frame}[plain]
\begin{center}
\Large Exercises \\

\vspace{1.5cm}
\includegraphics[height=.25\textheight]{exercises.jpg}
\end{center}
\end{frame}

% ----------------------------------------------------------------------------------------------------------------------
\section{Efficient Programming}



% ----------------------------------------------------------------------------------------------------------------------
\section{Wrap Up}

\begin{frame}{General Advice}
\begin{itemize}
\item Investing time in learning R pays off
\item It's a steady learning curve
\item Learn from masters
\item Rewrite important code - the first attempt is usually not the best approach
\end{itemize}
\end{frame}

\begin{frame}{General R Advice}
\begin{itemize}
\item Document well
\item Use a consistent style
\item Write functions
\item Split long functions in smaller ones
\item Write wrappers
\item Use Iteration (don't copy paste)
\item Use matrix operations and vectorized functions instead of loops
\item Use git
\end{itemize}
\end{frame}

\begin{frame}{Literature Recommendations}
R Resources
\begin{itemize}
\item Avanced R Ed. 1 (\url{http://adv-r.had.co.nz/})
\item Avanced R Ed. 2 (\url{https://adv-r.hadley.nz/})
\item R Inferno (\url{https://www.burns-stat.com/pages/Tutor/R_inferno.pdf})
\item R Packages (\url{https://r-pkgs.org/})
\item Clean Code (\url{https://enos.itcollege.ee/~jpoial/oop/naited/Clean\%20Code.pdf})
\end{itemize}

\end{frame}


\begin{frame}[plain]

\begin{center}
\Large Thank you for your attention!

\visible<2>{Questions? Remarks?}
\end{center}

\end{frame}

\end{document}
