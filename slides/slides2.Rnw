\documentclass[xcolor=table]{beamer}

\usepackage[]{graphicx}\usepackage[]{color}

\usepackage{alltt}

% tikz
\usepackage{tikz}
\usepackage{pgflibraryshapes}
\usetikzlibrary{decorations.pathreplacing}
\usetikzlibrary{backgrounds}
\usetikzlibrary{shapes,arrows,positioning,fit}
\usetikzlibrary{positioning}
\usetikzlibrary{tikzmark, shapes.misc, calc}

\usepackage{array}
\usepackage[originalparameters]{ragged2e} 

% kable packages
\usepackage{longtable}
\usepackage{array}
\usepackage{multirow}
\usepackage{wrapfig}
\usepackage{float}
\usepackage{colortbl}
\usepackage{pdflscape}
\usepackage{tabu}
\usepackage{threeparttable}
\usepackage{threeparttablex}
\usepackage[normalem]{ulem}
\usepackage{makecell}

\usepackage{amsmath}
\usepackage{booktabs}
%\usepackage[ansinew]{inputenc}
\usepackage[utf8]{inputenc}
\usepackage[ngerman, english]{babel}

\usepackage{bm}

\usetheme{metropolis}   

<<r setup, echo=FALSE, message=FALSE, results='hide'>>=
suppressPackageStartupMessages({
  library(knitr)
})

knit_theme$set("acid")
opts_chunk$set(message=FALSE, warning=FALSE,echo=FALSE)
opts_chunk$set(results="hide")

## R Setup
#load("~/Documents/Workshops/FDZ_Reporting/IQB-LV-2011_SchuelerInnen-Eltern_CF.rda")



# Farben
mLightBrown<-"#EB811B"
econBlue<-"#008BBC"
econRed<-"#C10534"
econBlueD<-"#3E647D"
econRedD<-"#90353B"
@


\begin{document}
%\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}

\title{Programming with R/Advanced R}
\institute{FDZ Spring Academy}


\author[Dries Debeer \& Benjamin Becker]{Dries Debeer \& Benjamin Becker}
\date{18. + 19. March 2021}


\begin{frame}
\titlepage
\end{frame}
\addtocounter{framenumber}{-1}

\begin{frame}{Introduction}
\textbf{Who are we?}

\begin{columns}[t]
\begin{column}{.475\textwidth}
\textcolor{mLightBrown}{Dries Debeer}
\end{column}
  \begin{column}{.475\textwidth}
    \textcolor{mLightBrown}{Benjamin Becker}
  \end{column}
\end{columns}

\begin{columns}[t]
\begin{column}{.475\textwidth}
Senior Researcher at itec (imec Research Group at KU Leuven)
  	
\end{column}
\begin{column}{.475\textwidth}
Researcher at IQB (Statistics Department)

  \end{column}
\end{columns}

\begin{columns}[t]
\begin{column}{.475\textwidth}

\href{mailto:dries.debeer@kuleuven.be}{dries.debeer@kuleuven.be}
  	
\end{column}
  \begin{column}{.475\textwidth}

\href{b.becker@iqb.hu-berlin.de}{b.becker@iqb.hu-berlin.de}

  \end{column}
\end{columns}

\vspace{1.5em}
\end{frame}

\begin{frame}{Introduction}
\textbf{Who are you?}
\begin{enumerate}%\itemsep0em
	\item Specific interests?
	\item Previous knowledge and experience?
	\begin{itemize}
	  \item with R
	  \item with other statistic software
	  \item with other programming languages
	\end{itemize}
\end{enumerate}

\end{frame}

\begin{frame}{Motivation}
	\begin{itemize}
			\item Being more efficient in your research
			\item Successful collaborations (with your future self?)
			\item Syntaxes as part of paper submissions
			
	\end{itemize}
\end{frame}

\section{R Objects (Recap)}



\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.''}
  \vskip5mm
  \hspace*\fill{\small--- John Chambers}
\end{exampleblock}
\end{frame}


\begin{frame}{R Objects (Recap)}

	\begin{itemize}
			\item What are objects?
			\item Attomic vectors
			\item Vector structures
			\item subsetting
			\item replacement
	\end{itemize}
\end{frame}


\subsection{What are objects?}


\begin{frame}{What are objects?}

	\begin{itemize}
			\item Data-structures that can be used in computations.
			\item Collections of data of al kinds that are dynamically created and manipulated.
			\item Can be very small, like a single number: \texttt{2.1}, or very big, like a complete data set  (i.e., \texttt{data.frame}) or a random forest output.
			\item Elementary data structures can be combined in more complex data structures.
			\item Creating new types of \emph{complex} objects is part of programming in R (S3, S4).
			
	\end{itemize}
\end{frame}


\subsection{Attomic Vectors}


\begin{frame}{Attomic Vectors}

\begin{center}
  \begin{tabular}{| l | l |}
    \hline
    \multicolumn{2}{|c|}{Basic object types} \\ \hline
    logical   & \texttt{TRUE}, \texttt{FALSE}, \texttt{NA} \\ 
    integer   & \texttt{1L}, \texttt{142}, \texttt{-5}, ..., \texttt{NA} \\
    double    & \texttt{1.0}, \texttt{1.25784}, \texttt{pi}, ..., \texttt{NA} \\
              & \texttt{NaN}, \texttt{-Inf}, \texttt{Inf} \\
    character & \texttt{"1"}, \texttt{"Some other string"}, ..., \texttt{NA} \\
    \hline
  \end{tabular}
\end{center}

mulitple values in one object $\rightarrow$ \texttt{length()} starting from \texttt{0}

\end{frame}


\begin{frame}[fragile]{Attomic Vectors}
An important type with special behavior is \texttt{NULL}. It is an empty object that can be interpreted as \emph{nothing}. It's length is 0.

<<NULL, echo = TRUE>>=
c(NULL, "a", NULL)
length(NULL)
c(NULL, NULL, NULL)
@

\texttt{NULL} is mostly used as a default argument in fuction, in order to create some default behavior.

\end{frame}


\subsubsection{Coercion/Conversion}


\begin{frame}[fragile]{Coercion/Conversion}

	\begin{itemize}
			\item Automatic conversion:
			NULL $\rightarrow$ logical $\rightarrow$ integer $\rightarrow$ double $\rightarrow$ character
      \end{itemize}

<<auto-conversion, echo = TRUE>>=
1 + TRUE
c(FALSE, "word")
@

	\begin{itemize}		
			\item explicit conversion: \texttt{as."type"()}
	\end{itemize}
			
<<explicit-conversion, echo = TRUE>>=
as.character(FALSE)
as.logical(0:5)
@

\end{frame}


\begin{frame}[fragile]{Attomic vectors - check type}

	\begin{itemize}	
			\item check type using: \texttt{is."type"()}
	\end{itemize}
  
<<as.type, echo = TRUE>>=
is.logical(FALSE)
is.character(c(FALSE, "a string")[1])
@

	\begin{itemize}	
			\item check type using: \texttt{typeof()}
  \end{itemize}	
  
<<typeof, echo = TRUE>>=
typeof(Inf)
typeof(TRUE + FALSE)
@

\end{frame}


\subsubsection{Assignment}


\begin{frame}[fragile]{Assignment}

In order to compute with objects efficiently, names can be assigned to the objects Using \texttt{<-} (or \texttt{=})

	
<<assignment, echo = TRUE>>=
my_object <- TRUE
my_object
@

The objects (with references) that are available to a user can be seen in the global environment using \texttt{ls}.

R overrides previous assignments without a message.


Removed objects (\texttt{rm(objectName)}) cannot be restored. $\rightarrow$ \emph{May the sourcecode be with you!}.

\end{frame}


\subsubsection{Attributes}


\begin{frame}[fragile]{Attributes}

Attributes can be attached to objects together with an name for that attribute. An attribute is itself an object. 

Attributes are easily lost in computations. (One of the reasons to use OOP with classes and methods.)

<<attributes, echo = TRUE>>=
my_object <- structure(5, my_attribute = "string", other_attribute = FALSE)
attributes(my_object)
attr(my_object, "new") <- c(14, 25)
str(my_object)
str(as.integer(my_object))
@

\end{frame}



\begin{frame}[fragile]{Attributes}

There are several attributes with a specific use: \texttt{"names"}, \texttt{"dim "}\texttt{"class"}, \texttt{"levels"}

\begin{itemize}
  \item \texttt{"names"} is a character vector that contains the names of elements of the vector/object. Names can be printed and set using \texttt{names(object) <- }.
  \item \texttt{"dim"} is an integer vector that specifies how we should interpret the vector (i.e., as a matrix, as an array). The dimensions of a vector can be printed and set using \texttt{dim(object) <- }.
  $\rightarrow$ a \texttt{matrix} or \texttt{matrix} is a vector with a \texttt{"dim"} attribute.
  \item \texttt{"class"} is a character vector that contains class names. Classes can be printed and set using \texttt{class(object) <- }}. See \textbf{Object Oriented Programming (S3)}
  \item \texttt{"levels"} is a character vector that contains the names levels of a factor. Levels can be printed and set using \texttt{levels(factor) <- }.
  \end{itemize}


<<attributes2, echo = TRUE>>=
a <- 1:8
str(a)
attr(a, "dim") <- c(2, 4)
str(a)
is.matrix(a)
as.character(c(aa = 1, bb = 2))
is.factor(structure(1:2, levels = c("a", "b"), class = "factor"))
as.character(c(a = 1, b = 2))
@

\end{frame}


\begin{frame}[fragile]{Attributes}

A factor in R is actually an integer vector with a class attribute set to \texttt{"factor"}, and a levels attribute set to the level-labels that correspond to the integer values from 1 to the highest integer value in the integer vectors.

<<factor, echo = TRUE>>=
int <- as.integer(c(1, 2, 1, 1, 3, 1, 5, 2))
attr(int, "levels") <- c("Now way!", "Not sure", "maybe", "OK", "Definitively!")
attr(int, "class") <- "factor"
int
@


\end{frame}



\begin{frame}{More Basic Object Types}

\begin{center}
  \begin{tabular}{| l | l |}
    \hline
    \multicolumn{2}{|c|}{More basic object types} \\ \hline
    complex     & \texttt{1 + 2.31i}, ... \texttt{NA} \\ 
    raw         & \texttt{as.raw(2)}, \texttt{charToRaw("a")} \\
    expression  & \texttt{expression(1+1, sum(a, b))} \\ \hline
    language    & a function call, \texttt{quote(1 + y)}  \\
    closure     & \texttt{function(x) x - 1}, \texttt{mean}  \\
    builtin     & \texttt{sum},  \texttt{c} \\
    special     & \texttt{for},  \texttt{return} \\ \hline
    environment & an environment \\
    symbol      & \texttt{quote(x)} \\ \hline
    ...         & ... \\
    \hline
  \end{tabular}
\end{center}

\end{frame}


\subsection{Vecture Structures}


\begin{frame}[fragile]{Vector Structures}

\begin{center}
  \begin{tabular}{| l | l |}
    \hline
    \multicolumn{2}{|c|}{More basic object types} \\ \hline
    matrix      & actually a vector with \texttt{"dim"} argument: two dimensions \\
                & \texttt{matrix()} \texttt{as.matrix()} \\ 
                & matrix algebra \\ 
    array       & actually a vector with with \texttt{"dim"} argument \\            \hline
    list        & \texttt{list()}, \texttt{as.list()}, ...  \\ 
    data.frame  & actually a list with vectors of equal length  \\
                & \texttt{data.frame}, \texttt{as.dataframe}  \\

    \hline
  \end{tabular}
\end{center}

\end{frame}



\begin{frame}[fragile]{List}

\begin{itemize}
  \item ``vectors'' that can contain any type of element
  \item including lists $\rightarrow$ recursive
  \item can have attributes, even \texttt{"dim"} (though mostly not useful)
\end{itemize}

<<lists, echo = TRUE>>=
my_list <- list(1.23, "this", a = list(a = c(1:2)), TRUE)
attr(my_list, "dim") <- c(2, 2)
my_list  # printing fails
@

\end{frame}



\begin{frame}[fragile]{Data.frame}

\begin{itemize}
  \item a list of (named) vectors of equal length
  \item including lists (using \texttt{I()}).
  \item has row names (but ignore these)
  \item has dimensions (but not a \texttt{"dim"}-attribute)
\end{itemize}

<<data.frame, echo = TRUE>>=
my_data  <- data.frame(1:4, var1 = c("a", "b", "c", "d")) 
attributes(my_data)
dim(my_data)
names(my_data)
typeof(my_data)
data.frame(1:4, var1 = I(list(c("a", "b"), list(FALSE, "FALSE") , 1:5, c("c", "d"))))
@

\end{frame}



\begin{frame}[fragile]{Matrix \& Array}

\begin{itemize}
  \item a vector with a \texttt{"dim"}-attribute
  \item mostly usefull for numeric vectors (integer and double)
  \item matrix algebra!  \texttt{t(matrix)}, \texttt{\%*\%}, \texttt{aperm(array))}...
  \item matrix has two dimensions, array has $n$ dimensions
\end{itemize}

<<matrix, echo = TRUE>>=
my_matrix <- matrix(2.5, nrow = 3, ncol = 3)
is.array(my_matrix)
dim(my_matrix)
typeof(my_matrix)
as.double(my_matrix)
my_array <- array(1:8, dim = c(2, 2, 2))
is.array(my_array)
dim(my_array)
typeof(my_array)
length(my_array)
@

\end{frame}


\subsection{Subsetting - Selection}


\subsubsection{Subsetting - Attomic Vectors}


\begin{frame}[fragile]{Subsetting - attomic vectors}

A subset of elements from a vector can be accessed using \texttt{object[selection]}, where \texttt{selection} is:

\begin{itemize}
  \item a logical vector with the same length of the original vector (\texttt{TRUE}: select; \texttt{FALSE}: don't select)
  \item an integer vector indicating the indeces of the elements to select (or exclude)
  \item a character vector with the names of the elements to select
\end{itemize}

\end{frame}


\begin{frame}[fragile]{Subsetting - attomic vectors}

Using a logical vector:

\begin{itemize}
  \item the logical vector should have the same length of the object. If shorter, the logical is repeated; if longer, \texttt{NA}s are added if \texttt{TRUE}. $\rightarrow$ always use the same length!
  \item handy when you want to select based on a condition related to the object values
\end{itemize}

\end{frame}

<<selection-logical, echo = TRUE>>=
my_object <- c(a = 1, b = 5, c = 3, d = 8)
my_object[c(TRUE, FALSE, FALSE, TRUE)]
my_object[TRUE]
my_object[c(FALSE, TRUE)]
my_object[c(FALSE, TRUE, TRUE, FALSE, TRUE)]
my_object[my_object > 4]
my_object[1:4 < 4]
@

\end{frame}


\begin{frame}[fragile]{Subsetting - attomic vectors}

Using an integer vector:

\begin{itemize}
  \item the integer vector can have any length (repeated indices are repeatedly selected)
  \item positive values mean \emph{select}, negative values mean \emph{drop}
  \item positive and negative values cannot be combined
  \item for integers higher than the number of elements in the vector, \texttt{NA}s are added
  \item using \texttt{which()} a logical vector is transformed in an integer vector with the indices of the elements that were \texttt{TRUE}
  \item double elements are truncated towards zero (using \texttt{as.integer()}))
\end{itemize}

\end{frame}

<<selection-integer, echo = TRUE>>=
my_object <- c(a = 1, b = 5, c = 3, d = 8)
my_object[c(1, 5)]
my_object[c(1, 2, 1, 2, 1, 2, 1 ,2, 1, 2, 1, 2)]
my_object[-c(2, 4, 2)]
my_object[my_object > 4]
my_object[which(my_object > 4)]
which(my_object > 4)
my_object[1.999]
@

\end{frame}



\begin{frame}[fragile]{Subsetting - attomic vectors}

Using a character vector:

\begin{itemize}
  \item the strings that match with the names of the elements in the vector are returned
  \item the character vector can have any length (repeated names are repeatedly selected)
  \item only selection is possible (dropping is not)
  \item strings that are not matched with names return \texttt{NA}
\end{itemize}

\end{frame}

<<selection-character, echo = TRUE>>=
my_object <- c(a = 1, b = 5, c = 3, d = 8)
my_object[c("a", "b")]
my_object[c("a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b")]
my_object[-c("a", "b")]
@

\end{frame}



\begin{frame}[fragile]{Subsetting - attomic vectors}

A \textbf{sinlge} element from a vector can be accessed using \texttt{object[[selection]}, where \texttt{selection} is:

\begin{itemize}
  \item an integer value indicating the index of the element to select
  \item a character vector with the names of the elements to select
\end{itemize}

<<selection-2, echo = TRUE>>=
my_object <- c(a = 1, b = 5, c = 3, c2 = 8)
my_object[[2]]
my_object[["c"]]
@

\end{frame}


\subsubsection{Subsetting - Matrix \& Arrays}


\begin{frame}[fragile]{Subsetting - Matrix \& Arrays}

Because arrays and martrices are attomic vectors (with a \texttt{"dim"} argument), the rules for attomic vectors apply.

In addition, selection is possible per dimension:

\begin{itemize}
  \item multiple selection vectors separated by a comma
  \item selection vectors can be character (match row or column names), integer (row and column number) or logical
  \item the first vector selects the rows, the second the columns (and so on)
  \item automatically the dimensions are dropped. Use \texttt{drop = FALSE} to avoid this
\end{itemize}

Finally, the selection ellement can also be a matrix (with one column per dimension). Each row in the matrix selects one value.

<<selection-matrix, echo = TRUE>>=
my_matrix <- matrix(c(11, 12, 21, 22), ncol = 2, dimnames = list(paste0("row", 1:2), paste0("col", 1:2)))
names(my_matrix) <- letters[1:4]
my_matrix[2]
my_matrix[["b"]]
my_matrix[my_matrix < 20]
my_matrix[2,]
my_matrix[,2]
my_matrix[-1,"col2"]
my_matrix["row1",c(TRUE, FALSE)]
my_matrix["row1",c(TRUE, FALSE)]
is.matrix(my_matrix[,1])
is.matrix(my_matrix[,1, drop = FALSE])
my_matrix[matrix(c(c(1, 2), c(1, 2)), ncol = 2)]
@

\end{frame}


\subsubsection{Subsetting - Vector Structures}


\begin{frame}[fragile]{Subsetting - Lists}

\begin{itemize}
  \item For list, the rules are similar as for atomic vectors.
  \item \texttt{list[selection]} gives a list
  \item \texttt{list[[selection]]} gives the element (which can be a list)
  \item \texttt{list[["element\_name"]]} is the same as \texttt{list\$element\_name}
\end{itemize}

<<selection-list, echo = TRUE>>=
my_list<- list(a = 1, b = 5, c = 3, d = 8)
my_list[c(2, 2)]
my_list[["b"]]
my_list$b
my_list[c(TRUE, TRUE, FALSE)]
is.list(my_list["a"])
is.list(my_list[["a"]])
@

\end{frame}


\begin{frame}[fragile]{Subsetting - data.frames}

Because data.frames are lists, the rules for lists apply. 

In addition, the selection rules for matrices can be used: (i.e., with ).

\begin{itemize}
  \item selection per row and column
  \item selection via a matrix with two columns
\end{itemize}

<<selection-data.frame, echo = TRUE>>=
my_dat <- data.frame(col1 = c(11, 21), col2 = c(12, 22))
my_dat[1]
my_dat["col1"]
my_dat[,"col1"]
my_dat[,"col1", drop = FALSE]
my_dat$col1
my_dat[c(TRUE, FALSE)]
is.data.frame(my_dat["col1"])
is.data.frame(my_dat[["col1"]])
my_dat[c(TRUE, FALSE), "col2"]
my_dat[c(TRUE, FALSE), "col2", drop = FALSE]
my_dat[matrix(c(c(1, 2), c(1, 2)), ncol = 2)]
@

\end{frame}


\subsection{Element Replacement}


\begin{frame}[fragile]{Element Replacement}

A subset of elements from a vector or vector structure can be replaced using \texttt{object[selection] <- new\_values}:

\begin{itemize}
  \item the modifications are done in place
  \item the structure and class of the object stay unchanged
  \item the length of the new values should correspond with the length of the selection (the number of elements to replace should be a multiple of the number of new values)
  \item only for lists, the replacement can be \texttt{NULL} (which removes the element from the list)
\end{itemize}

<<replacement, echo = TRUE>>=
my_dat <- data.frame(col1 = c(11, 21), col2 = c(12, 22))
my_dat[1] <- 33
my_dat["col2"] <- NULL
my_dat[,1] <- NULL
@
\end{frame}


\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.''}
  \vskip5mm
  \hspace*\fill{\small--- John Chambers}
\end{exampleblock}
\end{frame}


\subsection{Function Calls}


\begin{frame}{Function Calls}

\begin{itemize}
  \item Computing in R happens through function calls. A function is applied to one or more objects, and returns an object after the computation. 
  \item The typical use is \texttt{function\_name(object1, argument\_name = object2)}
  \item Computations that seem not to be done using functions are actually also functions. Check \texttt{\`<-\`(a, 5)} or \texttt{\`>\`(5, 2)}
  \item most functions that seem not to return an object, return it invisibly. Check \texttt{(`<-`(a, 5))}.
\end{itemize}

\end{frame}


\section{Clean Code}


\begin{frame}{Clean Code}

\begin{itemize}
  \item Code Style 
  \item Efficient R
  \item Efficient RStudio
\end{itemize}

\end{frame}


\subsection{Code Style}


\begin{frame}[fragile]
\begin{exampleblock}{}
  {\large ``Write code for humans, not for machines!''}
  \vskip5mm
  \hspace*\fill{\small}
\end{exampleblock}
\end{frame}



\begin{frame}{Code Style}

Invest time in writing readable R-code.

\begin{itemize}
  \item It will make collaboration easier
  \item It will make debugging easier
  \item It will help make your analysis reproducible 
\end{itemize}

There is a complete \emph{tidyverse} style-guide \url{https://style.tidyverse.org/}.

\end{frame}


\subsection{Go easy on your eyes}

\begin{frame}{Go easy on your eyes}

\begin{itemize}
  \item with spaces before and after: \texttt{-  +  /  *  =  <-  <  ==  > }
  \item always use \texttt{<-} for assignments
  \item only use \texttt{=} in function calls
  \item use indentation (largely automatical in RStudio)
  \item \texttt{CamelCaseNames} vs \texttt{snake_case_names}
  \item be consitent!
  \item wrap long lines at column 70-80 (Rstudio)
\end{itemize}


\end{frame}


\begin{frame}[fragile]{White spaces}

<<White spaces, eval = FALSE, echo = TRUE>>=
new_var=(var1*var2/2)-5/(var3+var4)

# versus

new_var <- (var1 * var2 / 2) - 5 / (var3 + var4)
@

\end{frame}


\begin{frame}[fragile]{Indentation}

<<Indentation, eval = FALSE, echo = TRUE>>=
for(name in names){formula=as.formula(paste0("y~.-",name))
fit<-lm(formula,data=my_data)
coefs[["name"]]=coef(fit)
print(name)
print(summary(fit))}

# versus

for(name in names){
  formula <- as.formula(paste0("y~.-", name))
  fit <- lm(formula, data = my_data)
  coefs[["name"]] <- coef(fit)
  print(name)
  print(summary(fit))
}
@

\end{frame}


\begin{frame}[fragile]{Wrap long lines}

<<Wrap long lines, eval = FALSE, echo = TRUE>>=
final_results <- data.frame(first_variable = sqrt(results$mean_squared_error), second_variable = paste0(results$condition, results$class, sep = ":"), third_variable = results$bias)

# versus

final_results <- data.frame(
  first_variable = sqrt(results$mean_squared_error), 
  second_variable = paste0(results$condition, results$class, sep = ":"),
  third_variable = results$bias)
@

\end{frame}



\subsection{Go easy on your mind}

\begin{frame}{Go easy on your mind}

\begin{itemize}
  \item use meaningful names: ``self-explainable''
  \item benefit from autocompletion (\texttt{tab}) => embrace longer names
  \item always write the formal arguments in function calls (except the first)
  \item use \texttt{TRUE} and \texttt{FALSE} not \texttt{T} and \texttt{F}
  \item comment, comment, comment
  \begin{itemize}
    \item NOT what (should be clear from the code)
    \item BUT why
    \item Explain the reasoning, not the code 
  \end{itemize}
\end{itemize}

\end{frame}


\begin{frame}[fragile]{Write formal arguments}

Benefit from auto completion using \texttt{tab}

<<Write formal arguments, eval = FALSE, echo = TRUE>>=
m1_B <- lm(outcome ~ age*gender, exp1, condition_1, freq)

# versus

lm_age_gender <- lm(outcome ~ age*gender, data = exp1, 
                    subset = condition_1, 
                    weigths = freq)
@

\end{frame}



\begin{frame}[fragile]{Use meaningful names}

<<Use meaningful names, eval = FALSE, echo = TRUE>>=
V <- myFun(m1_B)

# versus

RMSE_age_gender <- get_RMSE(lm_age_gender)
@

Use \texttt{verbs} for functions and \texttt{nouns} for objects.

\end{frame}


\begin{frame}[fragile]{Comment, comment, comment}

<<Comment, eval = FALSE, echo = TRUE>>=
## Start every Rscript with a comment that explains what the code in the script
##  does, why it does this, and to which project it belongs. 
##  Your future self will be very thankful!
##
## Mention which packages you are using in this Rscript.


## Use sections to separate chunks -------------------------------------------


## Maybe even subsections ====================================================


## Recode variables so that missings are coded as "NA"
data[data %in% c(99, 999)] <- NA         # missings were coded as 99 or 999
@

\end{frame}


\subsection{R Peculiarities}

\begin{frame}[fragile]{Don't grow, replace}

<<replace, eval = FALSE, echo = TRUE>>=
n <- 2e+4
data <- data.frame(x = runif(n), 
                   y = runif(n), 
                   z = seq_len(n))

# grow object
system.time({
  new_data <- NULL
  
  for(row_nr in seq_len(NROW(data))){
    new_data <- cbind(data[row_nr,], result = exp(data$x[row_nr]) /
                        log(data$z[row_nr]) + 5 * sqrt(data$y[row_nr]))
  }  
})

# replace
system.time({
  n_rows <- dim(data)[1]
  data$result <- rep(NA, n_rows)
  
  for(row_nr in seq_len(n_rows)){
    data$result[row_nr] <- exp(data$x[row_nr]) / log(data$z[row_nr]) + 
      5 * sqrt(data$y[row_nr])
  } 
})
@

Replace preferably by column, not by row (in data.frames)

\end{frame}



\begin{frame}[fragile]{Vectorize}

<<vectorize, eval = FALSE, echo = TRUE>>=
n <- 2e+4
data <- data.frame(x = runif(n), 
                   y = runif(n), 
                   z = seq_len(n))

# vectorized
system.time({
  result <- exp(data$x) / log(data$z) + 5 * sqrt(data$y)
})
@

\end{frame}



\begin{frame}[fragile]{Keep your code slim}

Try to limit your _package-dependencies_. Only load (i.e., \texttt{library()}) the packages that you absolutely need. I you are only using \texttt{dplyr}, it does not make sense to load the complete \texttt{tidyverse}.

\textbf{Controversial:} when you are only using a function from a package once or twice, DON'T load the package, but directly access the function using the \texttt{::} operator.

Less loaded packages mean less changes or name conflicts.
@

\end{frame}


\begin{frame}[fragile]{Never Attach}

Forget about \texttt{attacht()}! Don't use it, unless you completely understand what happens (\texttt{?attach}).

With `data.frames`, use `with(data.frame, expression)` instead.

<<attach, eval = FALSE, echo = TRUE>>=
# using with()
n <- 2e+4
data <- data.frame(x = runif(n), 
                   y = runif(n), 
                   z = seq_len(n))
result <- with(data, exp(x) / log(z) + 5 * sqrt(y))
@

\end{frame}



\begin{frame}[fragile]{Testing R code}

Writing code is error prone. Incorporate tests and checks in your workflow. For instance, when you do data manipulations like a complex restructuring of the data, or a complex recoding of multiple variable, write some code that allows you the check whether the obtained results are what you want them to be.

\begin{itemize}
  \item minimal examples
  \item write test and checks
  \item helpful packages: \texttt{testthat}, \texttt{RUnit}, \texttt{testit}, ...
\end{itemize}
\end{frame}



## 





\section{Iteration}

\section{Understanding Functions}

\section{Writing Functions}

\section{Object Oriented Programming (S3)}

\section{Version Controlling (Git + Github)}


\begin{frame}{Literature Recommendations}
R Ressources
\begin{itemize}
\item Avanced R Ed. 1 (\url{http://adv-r.had.co.nz/})
\item Avanced R Ed. 2 (\url{https://adv-r.hadley.nz/})
\item R Inferno (\url{https://www.burns-stat.com/pages/Tutor/R_inferno.pdf})
\item R Packages (\url{https://r-pkgs.org/})
\item Clean Code (\url{https://enos.itcollege.ee/~jpoial/oop/naited/Clean\%20Code.pdf)})
\end{itemize}

\end{frame}


\begin{frame}[plain]

\begin{center}
\Large Thank you for your attention!

\visible<2>{Questions? Remarks?}
\end{center}

\end{frame}

\end{document}
