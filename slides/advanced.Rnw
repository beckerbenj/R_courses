\documentclass{beamer}

\usepackage{multicol}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{tikz}
\usetikzlibrary{arrows}
\usetikzlibrary{shapes.geometric}
\usepackage{hyperref}

\usetheme{metropolis}



\title{Advanced Programming in R}
\institute{Zurich R Courses}


\author[Dries Debeer \& Benjamin Becker]{Dries Debeer \& Benjamin Becker}
\date{15. October 2021}



<<r setup, echo=FALSE, message=FALSE, results="hide">>=
  suppressPackageStartupMessages({
    library(knitr)
  })

options(tinytex.verbose = TRUE)

knit_theme$set("acid")
opts_chunk$set(results="markup")
opts_chunk$set(echo = TRUE)
opts_chunk$set(eval = TRUE)
opts_chunk$set(strip.white = TRUE)
opts_chunk$set(size = "footnotesize")
opts_chunk$set(comment = ">")
opts_chunk$set(fig.width=3.5, fig.height=3) 


# Farben
mLightBrown<-"#EB811B"
econBlue<-"#008BBC"
econRed<-"#C10534"
econBlueD<-"#3E647D"
econRedD<-"#90353B"
@
  
  
  \begin{document}



\begin{frame}
\titlepage
\end{frame}
\addtocounter{framenumber}{-1}


\begin{frame}{Table of Content}
\fontsize{5pt}{4}
\setcounter{tocdepth}{2}
\begin{multicols}{3}
\tableofcontents
\end{multicols}
\end{frame}


\section{Introduction}

\begin{frame}{Introduction}
\begin{columns}[t]
\begin{column}{.475\textwidth}
\textbf{Who are we?} 

\vspace{0.3cm}

\textcolor{mLightBrown}{Dries Debeer} \\

\vspace{0.2cm}

Senior Researcher at itec (imec research group at KU Leuven)
\end{column}
\begin{column}{.475\textwidth}
\textbf{} 

\vspace{0.3cm}

\textcolor{mLightBrown}{Benjamin Becker} \\

\vspace{0.2cm}

Researcher at IQB (Statistics Department)

\end{column}
\end{columns}

\vspace{0.2cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}
\href{https://github.com/ddebeer/scDIFtest}{scDIFtest}, \href{https://github.com/ddebeer/permimp}{permimp}, \href{https://github.com/beckerbenj/eatATA}{eatATA}, \href{https://CRAN.R-project.org/package=mstDIF}{mstDIF}

\end{column}
\begin{column}{.475\textwidth}
\href{https://github.com/beckerbenj/eatGADS}{eatGADS}, \href{https://github.com/beckerbenj/eatDB}{eatDB}, \href{https://github.com/beckerbenj/eatATA}{eatATA}, \href{https://github.com/beckerbenj/pisaRT}{pisaRT}

\end{column}
\end{columns}

\vspace{0.3cm}

\begin{columns}[t]
\begin{column}{.475\textwidth}

\href{mailto:dries.debeer@kuleuven.be}{dries.debeer@kuleuven.be}

\end{column}
\begin{column}{.475\textwidth}

\href{b.becker@iqb.hu-berlin.de}{b.becker@iqb.hu-berlin.de}

\end{column}
\end{columns}

\vspace{1.5em}
\end{frame}

\begin{frame}{Introduction}
\textbf{Who are you?}
\begin{enumerate}%\itemsep0em
\item Occupation, employer?
  \item Previous knowledge and experience
\begin{itemize}
\item with R?
  \item with other statistical software?
  \item with other programming languages?
  \end{itemize}
\item Specific interest/motivation for this workshop?
  \end{enumerate}
\end{frame}


\section{Environments}


\begin{frame}{Environments}
Understanding environments is key to understanding how R behaves, how R finds stuff.
\begin{itemize}
  \item Scoping rules
  \item Namespaces
  \item Closures
\end{itemize}
\end{frame}
.

\begin{frame}{Environments}
An environment can be thought of as a bag of objects. It differs from a 
with respect to four key points:
\begin{itemize}
  \item All elements have names
  \item The elements do not have an order
  \item Environments are not copied when modified
  \item Each environment has an \emph{enclosing environment}
\end{itemize}
\end{frame}



\begin{frame}{Environments}
Each environment consists of two parts: 
\begin{enumerate}
  \item a \emph{frame}: a collection of named objects.
  \begin{itemize}
    \item the objects can be of any type (like in \texttt(lists))
    \item the objects have to be named (UNLIKE in \texttt(lists))
  \end{itemize}
  \item an \emph{enclosing enviroment}: a reference or link to another environment.
  \begin{itemize}
    \item the link goes in one direction
    \item determines the search path
  \end{itemize}
\end{enumerate}
\end{frame}

\begin{frame}{Environments - frame}
The frame is a ``\emph{bag}'' of named objects.
\begin{itemize}
  \item Actually, it is a bag of \emph{bindings} between names and objects
  \item The combination \emph{environment} and \emph{name} points to a specific 
  object (a location in memory) 
  \item The names in the bag have no order
\end{itemize}

\begin{center}
\includegraphics[height=.5\textheight]{from-Hadley/environment-bindings.png}
\end{center}
\end{frame}


\begin{frame}{Environments - frame}

An environment can containt itself!

\begin{center}
\includegraphics[height=.5\textheight]{from-Hadley/environment-self.png}
\end{center}
\end{frame}


\begin{frame}[fragile]{Environments - Refernce Semantics}

<<>>=
list1 <- list(a = "a", b = "5", c = mean)
list2 <- list1
list2$b <- 10
list1$b
list1$a <- NULL
names(list1)

env1 <- rlang::env(a = "a", b = "5", c = mean)
env2 <- env1
env2$b <- 10
env1$b
env1$a <- NULL
names(env1)
@



\end{frame}

\begin{frame}{Environments - enclosing environment}
Each environment is enclosed by/has a link to an environment. 

  \begin{itemize}
    \item the link goes in one direction
    \item an environment has only one enclosing environment
    \item an environment can enclose multiple environments (but it is hard to find out if so, and which)
    \item an environment can enclose itself (it is just a link!) $\rightarrow$ not very useful.
  \end{itemize}
  
The link is used for lexical scoping.

\end{frame}


\begin{frame}{Environments - enclosing environment}
The link is used for lexical scoping:

If the reference to an object is not found in the environment, R starts searching in the enclosing environment

\begin{center}
\includegraphics[height=.5\textheight]{from-Hadley/environment-link.png}
\end{center}

\end{frame}


\begin{frame}{Environments - get}
\texttt{?get} returns an object based on a name and an environment. The search jumps to the enclosing environment until the object is found when \texttt{inherits = TRUE}.

\texttt{?assign} assigns an object to a name in an environment. 

If the reference to an object is not found in the environment, R starts searching in the enclosing environment

\end{frame}


\begin{frame}{Environments}
Some important environments:
\begin{itemize}
  \item the global environment (\texttt{.GlobalEnv} or \texttt{globalenv()})
  \item the empty enviornment (\texttt{emptyenv()})
  \item the \texttt{package}-environment
  \item the \texttt{namespace}-environment
  \item the \texttt{imports}-environment
\end{itemize}

\end{frame}


\begin{frame}{Environments}
Some important environments:
\textbf{Global Enviroment}
\begin{itemize}
  \item the user's workspace
  \item first item on the search path
  \item \texttt{.GlobalEnv} or \texttt{globalenv()}
\end{itemize}
\end{frame}


\begin{frame}{Environments}
Some important environments:
\textbf{Empty Enviroment}
\begin{itemize}
  \item An ``empty bag''
  \item last item on the search path
  \item has no enclosing environment
  \item \texttt{emptyenv()}
\end{itemize}

\end{frame}


\begin{frame}{Search path}
Where does R find objects \emph{during interactive use}?
\begin{enumerate}
  \item the global environment
  \item the enclosing envrionment of the global environment
  \item the enclosing environment of ...
  \item the empty environment
\end{enumerate}

\end{frame}


\begin{frame}[fragile]{Search path}
Where does R find objects \emph{during interactive use}?

\texttt{?search()}
<<>>=
search()
@

Package environments have bindings to the exported objects (functions) of the package.
\end{frame}


\begin{frame}{Search path}
Where does R find objects \emph{during interactive use}?

\begin{center}
\includegraphics[height=.5\textheight]{from-Hadley/search-path.png}
\end{center}

Newly attached packages get a specific place in the search path. They become the enclosing environment of the global environment, and they are enclosed by the previously installed package. 

\end{frame}


\begin{frame}{Environments and functions}
Four environments are related to functions:

\begin{enumerate}
  \item the environment that binds the function
  \item the environment in which the function is called
  \item the environment in which the body of the function is executed
  \item the enclosing environment
\end{enumerate}

\end{frame}


\begin{frame}[fragile]{Environments and functions}
\textbf{1. the environment that binds the function}

<<>>=
add_10 <- function(x) x + 10
exists("add_10", envir = globalenv(), inherits = FALSE)

exists("sd", envir = as.environment("package:stats"), inherits = FALSE)

@

\end{frame}

\begin{frame}[fragile]{Environments and functions}
\textbf{1. the environment that binds the function}

<<>>=
sd <- sd
exists("sd", envir = globalenv(), inherits = FALSE)

exists("sd", envir = as.environment("package:stats"), inherits = FALSE)
@

Functions (objects) can have references in more than one environment!
\end{frame}


\begin{frame}[fragile]{Environments and functions}
\textbf{2. the environment in which the function is called}

\texttt{?parent.frame()}

<<>>=
print_calling_env <- function() parent.frame()
print_calling_env()
other_fun <- function() print_calling_env()
other_fun()
@
\end{frame}


\begin{frame}[fragile]{Environments and functions}
\textbf{3. the environment in which the body is executed}

\texttt{environment(NULL)}

<<>>=
get_calling_env <- function() parent.frame()
other_fun <- function() {
  print(environment())
  print(get_calling_env())
}
other_fun()
@

The execution environment disappears when the body is executed. Unless it 
becomes the enclosing environment of another function.
\end{frame}


\begin{frame}[fragile]{Environments and functions}
\textbf{4. the enclosing environment}
\texttt{environment(function)}
<<>>=
get_enclosing_env <- function() parent.env(environment())
get_enclosing_env()
make_funs <- function() {
  print(environment())
  new_fun1 <- function() parent.env(environment())
  new_fun2 <- get_enclosing_env
  return(list(new_fun1, new_fun2))
}
funs <- make_funs()
funs[[1]]()
funs[[2]]()
@
The execution environment disappears when the body is executed. Unless it 
becomes the enclosing environment of another function
\end{frame}


\begin{frame}[fragile]{Environments and functions}
\textbf{4. the enclosing environment}
when a function is created, the binding environment and the enclosing environment
are typically equal. But the enclosing environment can be changed (using 
\texttt{environment <-})
<<>>=
strange_mean <- function(x, ...) mean(x, ...)
strange_mean(1:3)
env1 <- rlang::env(mean = function(x, ...) "Strange!")
environment(strange_mean) <- env1
strange_mean(1:3)
@
\end{frame}


\begin{frame}{Search path}
Where does R find objects \emph{from inside functions}?
\begin{enumerate}
  \item the executing environment
  \item the enclosing environment
  \item the enclosing environment of the enclosing environment
  \item ...
  \item the empty environment
\end{enumerate}
\end{frame}


\begin{frame}{Search path}
Where does R find objects \emph{from inside functions defined in the global 
environment}?
\begin{enumerate}
  \item the executing environment
  \item the global environment (i.e., the enclosing environment)
  \item the \texttt{package:<name>} environment of the last attached package
  \item ...
  \item the empty environment
\end{enumerate}
\end{frame}


\begin{frame}{Search path}
Where does R find objects \emph{from inside functions defined in packages}?
\begin{enumerate}
  \item the executing environment
  \item the \texttt{namespace:<name>} environment 
  \item the \texttt{imports:<name>} environment
  \item the \texttt{namespace:base} environment
  \item the global environment (i.e., the enclosing environment)
  \item the \texttt{package:<name>} environment of the last attached package
  \item ...
  \item the empty environment
\end{enumerate}
\end{frame}



\begin{frame}{Search path}
Exported functions from packages have two binding environments!
\begin{itemize}
  \item the \texttt{namespace:<name>} environment 
  \item the \texttt{package:<name>} environment 
\end{itemize}
Both \texttt{::} and \texttt{:::} work.

\begin{center}
\includegraphics[height=.5\textheight]{from-Hadley/namespace-2binds.png}
\end{center}

But, only one enclosing environment: the \texttt{namespace:<name>} environment!

Thus, first the imported and exported functions of that package are found!
\end{frame}


\begin{frame}{Search path}
Unexported functions from packages one binding environment!
\begin{itemize}
  \item the \texttt{namespace:<name>} environment 
\end{itemize}
Which is also the enclosing environment: the \texttt{namespace:<name>} environment.
Only \texttt{:::} works.
\end{frame}


\begin{frame}{Search path}
Where does R find functions from packages?
\begin{center}
\includegraphics[height=.5\textheight]{from-Hadley/namespaces.png}
\end{center}
\end{frame}


\begin{frame}[fragile]{Environtments}
<<>>=
fun1 <- function(x) x + y
fun1(5)
y <- 5
fun1(5)



make_fun1 <- function(){
  y <- -5
  function(x) x + y
}
fun1 <- make_fun1()
fun1(5)
ls(environment(fun1))
assign("y", 20, envir = environment(fun1))
fun1(5)



fun2 <- function(x){
  mean <- function(x) "??"
  mean(x)
}
fun1(1:3)
fun2(1:3)
@
\end{frame}




\end{document}